import { EventEmitter, Injector, QueryList, TemplateRef, AfterViewInit } from '@angular/core';
import { Observable } from 'rxjs';
import { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';
import { TagModel } from '../../core/accessor';
import { TagInputComponent } from '../tag-input/tag-input';
import * as ɵngcc0 from '@angular/core';
export declare class TagInputDropdown implements AfterViewInit {
    private readonly injector;
    /**
     * @name dropdown
     */
    dropdown: Ng2Dropdown;
    /**
     * @name menuTemplate
     * @desc reference to the template if provided by the user
     */
    templates: QueryList<TemplateRef<any>>;
    /**
     * @name offset
     */
    offset: string;
    /**
     * @name focusFirstElement
     */
    focusFirstElement: boolean;
    /**
     * - show autocomplete dropdown if the value of input is empty
     * @name showDropdownIfEmpty
     */
    showDropdownIfEmpty: boolean;
    /**
     * @description observable passed as input which populates the autocomplete items
     * @name autocompleteObservable
     */
    autocompleteObservable: (text: string) => Observable<any>;
    /**
     * - desc minimum text length in order to display the autocomplete dropdown
     * @name minimumTextLength
     */
    minimumTextLength: number;
    /**
     * - number of items to display in the autocomplete dropdown
     * @name limitItemsTo
     */
    limitItemsTo: number;
    /**
     * @name displayBy
     */
    displayBy: string;
    /**
     * @name identifyBy
     */
    identifyBy: string;
    /**
     * @description a function a developer can use to implement custom matching for the autocomplete
     * @name matchingFn
     */
    matchingFn: (value: string, target: TagModel) => boolean;
    /**
     * @name appendToBody
     */
    appendToBody: boolean;
    /**
     * @name keepOpen
     * @description option to leave dropdown open when adding a new item
     */
    keepOpen: boolean;
    /**
     * @name dynamicUpdate
     */
    dynamicUpdate: boolean;
    /**
     * @name zIndex
     */
    zIndex: number;
    /**
     * list of items that match the current value of the input (for autocomplete)
     * @name items
     */
    items: TagModel[];
    /**
     * @name tagInput
     */
    tagInput: TagInputComponent;
    /**
     * @name _autocompleteItems
     */
    private _autocompleteItems;
    /**
     * @name autocompleteItems
     * @param items
     */
    set autocompleteItems(items: TagModel[]);
    /**
     * @name autocompleteItems
     * @desc array of items that will populate the autocomplete
     */
    get autocompleteItems(): TagModel[];
    constructor(injector: Injector);
    /**
     * @name ngAfterviewInit
     */
    ngAfterViewInit(): void;
    /**
     * @name updatePosition
     */
    updatePosition(): void;
    /**
     * @name isVisible
     */
    get isVisible(): boolean;
    /**
     * @name onHide
     */
    onHide(): EventEmitter<Ng2Dropdown>;
    /**
     * @name onItemClicked
     */
    onItemClicked(): EventEmitter<string>;
    /**
     * @name selectedItem
     */
    get selectedItem(): Ng2MenuItem;
    /**
     * @name state
     */
    get state(): any;
    /**
     *
     * @name show
     */
    show: () => void;
    /**
     * @name hide
     */
    hide(): void;
    /**
     * @name scrollListener
     */
    scrollListener(): void;
    /**
     * @name onWindowBlur
     */
    onWindowBlur(): void;
    /**
     * @name getFormValue
     */
    private getFormValue;
    /**
     * @name calculatePosition
     */
    private calculatePosition;
    /**
     * @name requestAdding
     * @param item {Ng2MenuItem}
     */
    private requestAdding;
    /**
     * @name createTagModel
     * @param item
     */
    private createTagModel;
    /**
     *
     * @param value {string}
     */
    private getMatchingItems;
    /**
     * @name setItems
     */
    private setItems;
    /**
     * @name resetItems
     */
    private resetItems;
    /**
     * @name populateItems
     * @param data
     */
    private populateItems;
    /**
     * @name getItemsFromObservable
     * @param text
     */
    private getItemsFromObservable;
    /**
     * @name setLoadingState
     * @param state
     */
    private setLoadingState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TagInputDropdown>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TagInputDropdown, "tag-input-dropdown", never, {
    "offset": "offset";
    "focusFirstElement": "focusFirstElement";
    "showDropdownIfEmpty": "showDropdownIfEmpty";
    "minimumTextLength": "minimumTextLength";
    "limitItemsTo": "limitItemsTo";
    "displayBy": "displayBy";
    "identifyBy": "identifyBy";
    "matchingFn": "matchingFn";
    "appendToBody": "appendToBody";
    "keepOpen": "keepOpen";
    "dynamicUpdate": "dynamicUpdate";
    "zIndex": "zIndex";
    "autocompleteItems": "autocompleteItems";
    "autocompleteObservable": "autocompleteObservable";
}, {}, ["templates"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWlucHV0LWRyb3Bkb3duLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0YWctaW5wdXQtZHJvcGRvd24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3TEEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdG9yLCBRdWVyeUxpc3QsIFRlbXBsYXRlUmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOZzJEcm9wZG93biwgTmcyTWVudUl0ZW0gfSBmcm9tICduZzItbWF0ZXJpYWwtZHJvcGRvd24nO1xuaW1wb3J0IHsgVGFnTW9kZWwgfSBmcm9tICcuLi8uLi9jb3JlL2FjY2Vzc29yJztcbmltcG9ydCB7IFRhZ0lucHV0Q29tcG9uZW50IH0gZnJvbSAnLi4vdGFnLWlucHV0L3RhZy1pbnB1dCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUYWdJbnB1dERyb3Bkb3duIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBkcm9wZG93blxuICAgICAqL1xuICAgIGRyb3Bkb3duOiBOZzJEcm9wZG93bjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBtZW51VGVtcGxhdGVcbiAgICAgKiBAZGVzYyByZWZlcmVuY2UgdG8gdGhlIHRlbXBsYXRlIGlmIHByb3ZpZGVkIGJ5IHRoZSB1c2VyXG4gICAgICovXG4gICAgdGVtcGxhdGVzOiBRdWVyeUxpc3Q8VGVtcGxhdGVSZWY8YW55Pj47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb2Zmc2V0XG4gICAgICovXG4gICAgb2Zmc2V0OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZm9jdXNGaXJzdEVsZW1lbnRcbiAgICAgKi9cbiAgICBmb2N1c0ZpcnN0RWxlbWVudDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiAtIHNob3cgYXV0b2NvbXBsZXRlIGRyb3Bkb3duIGlmIHRoZSB2YWx1ZSBvZiBpbnB1dCBpcyBlbXB0eVxuICAgICAqIEBuYW1lIHNob3dEcm9wZG93bklmRW1wdHlcbiAgICAgKi9cbiAgICBzaG93RHJvcGRvd25JZkVtcHR5OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBvYnNlcnZhYmxlIHBhc3NlZCBhcyBpbnB1dCB3aGljaCBwb3B1bGF0ZXMgdGhlIGF1dG9jb21wbGV0ZSBpdGVtc1xuICAgICAqIEBuYW1lIGF1dG9jb21wbGV0ZU9ic2VydmFibGVcbiAgICAgKi9cbiAgICBhdXRvY29tcGxldGVPYnNlcnZhYmxlOiAodGV4dDogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICogLSBkZXNjIG1pbmltdW0gdGV4dCBsZW5ndGggaW4gb3JkZXIgdG8gZGlzcGxheSB0aGUgYXV0b2NvbXBsZXRlIGRyb3Bkb3duXG4gICAgICogQG5hbWUgbWluaW11bVRleHRMZW5ndGhcbiAgICAgKi9cbiAgICBtaW5pbXVtVGV4dExlbmd0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIC0gbnVtYmVyIG9mIGl0ZW1zIHRvIGRpc3BsYXkgaW4gdGhlIGF1dG9jb21wbGV0ZSBkcm9wZG93blxuICAgICAqIEBuYW1lIGxpbWl0SXRlbXNUb1xuICAgICAqL1xuICAgIGxpbWl0SXRlbXNUbzogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGRpc3BsYXlCeVxuICAgICAqL1xuICAgIGRpc3BsYXlCeTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGlkZW50aWZ5QnlcbiAgICAgKi9cbiAgICBpZGVudGlmeUJ5OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQGRlc2NyaXB0aW9uIGEgZnVuY3Rpb24gYSBkZXZlbG9wZXIgY2FuIHVzZSB0byBpbXBsZW1lbnQgY3VzdG9tIG1hdGNoaW5nIGZvciB0aGUgYXV0b2NvbXBsZXRlXG4gICAgICogQG5hbWUgbWF0Y2hpbmdGblxuICAgICAqL1xuICAgIG1hdGNoaW5nRm46ICh2YWx1ZTogc3RyaW5nLCB0YXJnZXQ6IFRhZ01vZGVsKSA9PiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGFwcGVuZFRvQm9keVxuICAgICAqL1xuICAgIGFwcGVuZFRvQm9keTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBrZWVwT3BlblxuICAgICAqIEBkZXNjcmlwdGlvbiBvcHRpb24gdG8gbGVhdmUgZHJvcGRvd24gb3BlbiB3aGVuIGFkZGluZyBhIG5ldyBpdGVtXG4gICAgICovXG4gICAga2VlcE9wZW46IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgZHluYW1pY1VwZGF0ZVxuICAgICAqL1xuICAgIGR5bmFtaWNVcGRhdGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgekluZGV4XG4gICAgICovXG4gICAgekluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogbGlzdCBvZiBpdGVtcyB0aGF0IG1hdGNoIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBpbnB1dCAoZm9yIGF1dG9jb21wbGV0ZSlcbiAgICAgKiBAbmFtZSBpdGVtc1xuICAgICAqL1xuICAgIGl0ZW1zOiBUYWdNb2RlbFtdO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHRhZ0lucHV0XG4gICAgICovXG4gICAgdGFnSW5wdXQ6IFRhZ0lucHV0Q29tcG9uZW50O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIF9hdXRvY29tcGxldGVJdGVtc1xuICAgICAqL1xuICAgIHByaXZhdGUgX2F1dG9jb21wbGV0ZUl0ZW1zO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGF1dG9jb21wbGV0ZUl0ZW1zXG4gICAgICogQHBhcmFtIGl0ZW1zXG4gICAgICovXG4gICAgc2V0IGF1dG9jb21wbGV0ZUl0ZW1zKGl0ZW1zOiBUYWdNb2RlbFtdKTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBhdXRvY29tcGxldGVJdGVtc1xuICAgICAqIEBkZXNjIGFycmF5IG9mIGl0ZW1zIHRoYXQgd2lsbCBwb3B1bGF0ZSB0aGUgYXV0b2NvbXBsZXRlXG4gICAgICovXG4gICAgZ2V0IGF1dG9jb21wbGV0ZUl0ZW1zKCk6IFRhZ01vZGVsW107XG4gICAgY29uc3RydWN0b3IoaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBuZ0FmdGVydmlld0luaXRcbiAgICAgKi9cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSB1cGRhdGVQb3NpdGlvblxuICAgICAqL1xuICAgIHVwZGF0ZVBvc2l0aW9uKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaXNWaXNpYmxlXG4gICAgICovXG4gICAgZ2V0IGlzVmlzaWJsZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uSGlkZVxuICAgICAqL1xuICAgIG9uSGlkZSgpOiBFdmVudEVtaXR0ZXI8TmcyRHJvcGRvd24+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uSXRlbUNsaWNrZWRcbiAgICAgKi9cbiAgICBvbkl0ZW1DbGlja2VkKCk6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHNlbGVjdGVkSXRlbVxuICAgICAqL1xuICAgIGdldCBzZWxlY3RlZEl0ZW0oKTogTmcyTWVudUl0ZW07XG4gICAgLyoqXG4gICAgICogQG5hbWUgc3RhdGVcbiAgICAgKi9cbiAgICBnZXQgc3RhdGUoKTogYW55O1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQG5hbWUgc2hvd1xuICAgICAqL1xuICAgIHNob3c6ICgpID0+IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaGlkZVxuICAgICAqL1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBzY3JvbGxMaXN0ZW5lclxuICAgICAqL1xuICAgIHNjcm9sbExpc3RlbmVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25XaW5kb3dCbHVyXG4gICAgICovXG4gICAgb25XaW5kb3dCbHVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZ2V0Rm9ybVZhbHVlXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRGb3JtVmFsdWU7XG4gICAgLyoqXG4gICAgICogQG5hbWUgY2FsY3VsYXRlUG9zaXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIGNhbGN1bGF0ZVBvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHJlcXVlc3RBZGRpbmdcbiAgICAgKiBAcGFyYW0gaXRlbSB7TmcyTWVudUl0ZW19XG4gICAgICovXG4gICAgcHJpdmF0ZSByZXF1ZXN0QWRkaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGNyZWF0ZVRhZ01vZGVsXG4gICAgICogQHBhcmFtIGl0ZW1cbiAgICAgKi9cbiAgICBwcml2YXRlIGNyZWF0ZVRhZ01vZGVsO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRNYXRjaGluZ0l0ZW1zO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHNldEl0ZW1zXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRJdGVtcztcbiAgICAvKipcbiAgICAgKiBAbmFtZSByZXNldEl0ZW1zXG4gICAgICovXG4gICAgcHJpdmF0ZSByZXNldEl0ZW1zO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHBvcHVsYXRlSXRlbXNcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqL1xuICAgIHByaXZhdGUgcG9wdWxhdGVJdGVtcztcbiAgICAvKipcbiAgICAgKiBAbmFtZSBnZXRJdGVtc0Zyb21PYnNlcnZhYmxlXG4gICAgICogQHBhcmFtIHRleHRcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEl0ZW1zRnJvbU9ic2VydmFibGU7XG4gICAgLyoqXG4gICAgICogQG5hbWUgc2V0TG9hZGluZ1N0YXRlXG4gICAgICogQHBhcmFtIHN0YXRlXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRMb2FkaW5nU3RhdGU7XG59XG4iXX0=