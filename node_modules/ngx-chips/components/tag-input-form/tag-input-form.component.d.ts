import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class TagInputForm implements OnInit, OnChanges {
    /**
     * @name onSubmit
     */
    onSubmit: EventEmitter<any>;
    /**
     * @name onBlur
     */
    onBlur: EventEmitter<any>;
    /**
     * @name onFocus
     */
    onFocus: EventEmitter<any>;
    /**
     * @name onKeyup
     */
    onKeyup: EventEmitter<any>;
    /**
     * @name onKeydown
     */
    onKeydown: EventEmitter<any>;
    /**
     * @name inputTextChange
     */
    inputTextChange: EventEmitter<string>;
    /**
     * @name placeholder
     */
    placeholder: string;
    /**
     * @name validators
     */
    validators: ValidatorFn[];
    /**
     * @name asyncValidators
     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list
     */
    asyncValidators: AsyncValidatorFn[];
    /**
     * @name inputId
     */
    inputId: string;
    /**
     * @name inputClass
     */
    inputClass: string;
    /**
     * @name tabindex
     * @desc pass through the specified tabindex to the input
     */
    tabindex: string;
    /**
     * @name disabled
     */
    disabled: boolean;
    /**
     * @name input
     */
    input: any;
    /**
     * @name form
     */
    form: FormGroup;
    /**
     * @name inputText
     */
    get inputText(): string;
    /**
     * @name inputText
     * @param text {string}
     */
    set inputText(text: string);
    private readonly item;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @name value
     */
    get value(): FormControl;
    /**
     * @name isInputFocused
     */
    isInputFocused(): boolean;
    /**
     * @name getErrorMessages
     * @param messages
     */
    getErrorMessages(messages: {
        [key: string]: string;
    }): string[];
    /**
     * @name hasErrors
     */
    hasErrors(): boolean;
    /**
     * @name focus
     */
    focus(): void;
    /**
     * @name blur
     */
    blur(): void;
    /**
     * @name getElementPosition
     */
    getElementPosition(): ClientRect;
    /**
     * - removes input from the component
     * @name destroy
     */
    destroy(): void;
    /**
     * @name onKeyDown
     * @param $event
     */
    onKeyDown($event: any): void;
    /**
     * @name onKeyUp
     * @param $event
     */
    onKeyUp($event: any): void;
    /**
     * @name submit
     */
    submit($event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TagInputForm>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TagInputForm, "tag-input-form", never, {
    "validators": "validators";
    "asyncValidators": "asyncValidators";
    "tabindex": "tabindex";
    "disabled": "disabled";
    "inputText": "inputText";
    "placeholder": "placeholder";
    "inputId": "inputId";
    "inputClass": "inputClass";
}, {
    "onSubmit": "onSubmit";
    "onBlur": "onBlur";
    "onFocus": "onFocus";
    "onKeyup": "onKeyup";
    "onKeydown": "onKeydown";
    "inputTextChange": "inputTextChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWlucHV0LWZvcm0uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhZy1pbnB1dC1mb3JtLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE2SEEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBc3luY1ZhbGlkYXRvckZuLCBGb3JtQ29udHJvbCwgRm9ybUdyb3VwLCBWYWxpZGF0b3JGbiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhZ0lucHV0Rm9ybSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvblN1Ym1pdFxuICAgICAqL1xuICAgIG9uU3VibWl0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvbkJsdXJcbiAgICAgKi9cbiAgICBvbkJsdXI6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uRm9jdXNcbiAgICAgKi9cbiAgICBvbkZvY3VzOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvbktleXVwXG4gICAgICovXG4gICAgb25LZXl1cDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25LZXlkb3duXG4gICAgICovXG4gICAgb25LZXlkb3duOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBpbnB1dFRleHRDaGFuZ2VcbiAgICAgKi9cbiAgICBpbnB1dFRleHRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHBsYWNlaG9sZGVyXG4gICAgICovXG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAbmFtZSB2YWxpZGF0b3JzXG4gICAgICovXG4gICAgdmFsaWRhdG9yczogVmFsaWRhdG9yRm5bXTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBhc3luY1ZhbGlkYXRvcnNcbiAgICAgKiBAZGVzYyBhcnJheSBvZiBBc3luY1ZhbGlkYXRvciB0aGF0IGFyZSB1c2VkIHRvIHZhbGlkYXRlIHRoZSB0YWcgYmVmb3JlIGl0IGdldHMgYXBwZW5kZWQgdG8gdGhlIGxpc3RcbiAgICAgKi9cbiAgICBhc3luY1ZhbGlkYXRvcnM6IEFzeW5jVmFsaWRhdG9yRm5bXTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBpbnB1dElkXG4gICAgICovXG4gICAgaW5wdXRJZDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGlucHV0Q2xhc3NcbiAgICAgKi9cbiAgICBpbnB1dENsYXNzOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgdGFiaW5kZXhcbiAgICAgKiBAZGVzYyBwYXNzIHRocm91Z2ggdGhlIHNwZWNpZmllZCB0YWJpbmRleCB0byB0aGUgaW5wdXRcbiAgICAgKi9cbiAgICB0YWJpbmRleDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGRpc2FibGVkXG4gICAgICovXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgaW5wdXRcbiAgICAgKi9cbiAgICBpbnB1dDogYW55O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGZvcm1cbiAgICAgKi9cbiAgICBmb3JtOiBGb3JtR3JvdXA7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaW5wdXRUZXh0XG4gICAgICovXG4gICAgZ2V0IGlucHV0VGV4dCgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaW5wdXRUZXh0XG4gICAgICogQHBhcmFtIHRleHQge3N0cmluZ31cbiAgICAgKi9cbiAgICBzZXQgaW5wdXRUZXh0KHRleHQ6IHN0cmluZyk7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpdGVtO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKi9cbiAgICBnZXQgdmFsdWUoKTogRm9ybUNvbnRyb2w7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaXNJbnB1dEZvY3VzZWRcbiAgICAgKi9cbiAgICBpc0lucHV0Rm9jdXNlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGdldEVycm9yTWVzc2FnZXNcbiAgICAgKiBAcGFyYW0gbWVzc2FnZXNcbiAgICAgKi9cbiAgICBnZXRFcnJvck1lc3NhZ2VzKG1lc3NhZ2VzOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9KTogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogQG5hbWUgaGFzRXJyb3JzXG4gICAgICovXG4gICAgaGFzRXJyb3JzKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgZm9jdXNcbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGJsdXJcbiAgICAgKi9cbiAgICBibHVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZ2V0RWxlbWVudFBvc2l0aW9uXG4gICAgICovXG4gICAgZ2V0RWxlbWVudFBvc2l0aW9uKCk6IENsaWVudFJlY3Q7XG4gICAgLyoqXG4gICAgICogLSByZW1vdmVzIGlucHV0IGZyb20gdGhlIGNvbXBvbmVudFxuICAgICAqIEBuYW1lIGRlc3Ryb3lcbiAgICAgKi9cbiAgICBkZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25LZXlEb3duXG4gICAgICogQHBhcmFtICRldmVudFxuICAgICAqL1xuICAgIG9uS2V5RG93bigkZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25LZXlVcFxuICAgICAqIEBwYXJhbSAkZXZlbnRcbiAgICAgKi9cbiAgICBvbktleVVwKCRldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBzdWJtaXRcbiAgICAgKi9cbiAgICBzdWJtaXQoJGV2ZW50OiBhbnkpOiB2b2lkO1xufVxuIl19