{"version":3,"file":"ngx-mat-intl-tel-input.component.d.ts","sources":["ngx-mat-intl-tel-input.component.d.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA","sourcesContent":["import { MatFormFieldControl } from '@angular/material/form-field';\r\nimport { DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit, ChangeDetectorRef } from '@angular/core';\r\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { CountryCode } from './data/country-code';\r\nimport { Country } from './model/country.model';\r\nimport { PhoneNumberFormat } from './model/phone-number-format.model';\r\nimport { E164Number, PhoneNumber } from 'libphonenumber-js';\r\nimport { Subject } from 'rxjs';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { CanUpdateErrorState, CanUpdateErrorStateCtor, ErrorStateMatcher } from '@angular/material/core';\r\nimport { MatMenu } from '@angular/material/menu';\r\ndeclare class NgxMatIntlTelInputBase {\r\n    _defaultErrorStateMatcher: ErrorStateMatcher;\r\n    _parentForm: NgForm;\r\n    _parentFormGroup: FormGroupDirective;\r\n    /** @docs-private */\r\n    ngControl: NgControl;\r\n    constructor(_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, \r\n    /** @docs-private */\r\n    ngControl: NgControl);\r\n}\r\ndeclare const _NgxMatIntlTelInputMixinBase: CanUpdateErrorStateCtor & typeof NgxMatIntlTelInputBase;\r\nexport declare class NgxMatIntlTelInputComponent extends _NgxMatIntlTelInputMixinBase implements OnInit, OnDestroy, DoCheck, CanUpdateErrorState, MatFormFieldControl<any> {\r\n    private _changeDetectorRef;\r\n    private countryCodeData;\r\n    private fm;\r\n    private elRef;\r\n    ngControl: NgControl;\r\n    static nextId: number;\r\n    preferredCountries: Array<string>;\r\n    enablePlaceholder: boolean;\r\n    inputPlaceholder: string;\r\n    cssClass: any;\r\n    name: string;\r\n    onlyCountries: Array<string>;\r\n    errorStateMatcher: ErrorStateMatcher;\r\n    enableSearch: boolean;\r\n    searchPlaceholder: string;\r\n    get format(): PhoneNumberFormat;\r\n    set format(value: PhoneNumberFormat);\r\n    matMenu: MatMenu;\r\n    private _placeholder;\r\n    private _required;\r\n    private _disabled;\r\n    stateChanges: Subject<void>;\r\n    focused: boolean;\r\n    id: string;\r\n    describedBy: string;\r\n    phoneNumber: E164Number;\r\n    allCountries: Array<Country>;\r\n    preferredCountriesInDropDown: Array<Country>;\r\n    selectedCountry: Country;\r\n    numberInstance: PhoneNumber;\r\n    value: any;\r\n    searchCriteria: string;\r\n    countryChanged: EventEmitter<Country>;\r\n    private previousFormattedNumber;\r\n    private _format;\r\n    static getPhoneNumberPlaceHolder(countryISOCode: any): string;\r\n    onTouched: () => void;\r\n    propagateChange: (_: any) => void;\r\n    constructor(_changeDetectorRef: ChangeDetectorRef, countryCodeData: CountryCode, fm: FocusMonitor, elRef: ElementRef<HTMLElement>, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher);\r\n    ngOnInit(): void;\r\n    ngDoCheck(): void;\r\n    onPhoneNumberChange(): void;\r\n    onCountrySelect(country: Country, el: any): void;\r\n    getCountry(code: any): Country;\r\n    onInputKeyPress(event: any): void;\r\n    protected fetchCountryData(): void;\r\n    registerOnChange(fn: any): void;\r\n    registerOnTouched(fn: any): void;\r\n    setDisabledState(isDisabled: boolean): void;\r\n    writeValue(value: any): void;\r\n    get empty(): boolean;\r\n    get shouldLabelFloat(): boolean;\r\n    get placeholder(): string;\r\n    set placeholder(value: string);\r\n    get required(): boolean;\r\n    set required(value: boolean);\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    setDescribedByIds(ids: string[]): void;\r\n    onContainerClick(event: MouseEvent): void;\r\n    reset(): void;\r\n    ngOnDestroy(): void;\r\n    private get formattedPhoneNumber();\r\n    private formatAsYouTypeIfEnabled;\r\n}\r\nexport {};\r\n"]}