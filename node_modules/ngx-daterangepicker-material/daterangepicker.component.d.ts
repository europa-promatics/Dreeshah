import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import * as _moment from 'moment';
import { LocaleConfig } from './daterangepicker.config';
import { LocaleService } from './locale.service';
import * as ɵngcc0 from '@angular/core';
export declare enum SideEnum {
    left = "left",
    right = "right"
}
export declare class DaterangepickerComponent implements OnInit {
    private el;
    private _ref;
    private _localeService;
    private _old;
    chosenLabel: string;
    calendarVariables: {
        left: any;
        right: any;
    };
    tooltiptext: any[];
    timepickerVariables: {
        left: any;
        right: any;
    };
    daterangepicker: {
        start: FormControl;
        end: FormControl;
    };
    applyBtn: {
        disabled: boolean;
    };
    startDate: _moment.Moment;
    endDate: _moment.Moment;
    dateLimit: number;
    sideEnum: typeof SideEnum;
    minDate: _moment.Moment;
    maxDate: _moment.Moment;
    autoApply: Boolean;
    singleDatePicker: Boolean;
    showDropdowns: Boolean;
    showWeekNumbers: Boolean;
    showISOWeekNumbers: Boolean;
    linkedCalendars: Boolean;
    autoUpdateInput: Boolean;
    alwaysShowCalendars: Boolean;
    maxSpan: Boolean;
    lockStartDate: Boolean;
    timePicker: Boolean;
    timePicker24Hour: Boolean;
    timePickerIncrement: number;
    timePickerSeconds: Boolean;
    showClearButton: Boolean;
    firstMonthDayClass: string;
    lastMonthDayClass: string;
    emptyWeekRowClass: string;
    emptyWeekColumnClass: string;
    firstDayOfNextMonthClass: string;
    lastDayOfPreviousMonthClass: string;
    _locale: LocaleConfig;
    locale: any;
    _ranges: any;
    ranges: any;
    showCustomRangeLabel: boolean;
    showCancel: boolean;
    keepCalendarOpeningWithRange: boolean;
    showRangeLabelOnInput: boolean;
    customRangeDirection: boolean;
    chosenRange: string;
    rangesArray: Array<any>;
    isShown: Boolean;
    inline: boolean;
    leftCalendar: any;
    rightCalendar: any;
    showCalInRanges: Boolean;
    nowHoveredDate: any;
    pickingDate: boolean;
    options: any;
    drops: string;
    opens: string;
    closeOnAutoApply: boolean;
    choosedDate: EventEmitter<Object>;
    rangeClicked: EventEmitter<Object>;
    datesUpdated: EventEmitter<Object>;
    startDateChanged: EventEmitter<Object>;
    endDateChanged: EventEmitter<Object>;
    pickerContainer: ElementRef;
    constructor(el: ElementRef, _ref: ChangeDetectorRef, _localeService: LocaleService);
    ngOnInit(): void;
    renderRanges(): void;
    renderTimePicker(side: SideEnum): void;
    renderCalendar(side: SideEnum): void;
    setStartDate(startDate: any): void;
    setEndDate(endDate: any): void;
    isInvalidDate(date: any): boolean;
    isCustomDate(date: any): boolean;
    isTooltipDate(date: any): string;
    updateView(): void;
    updateMonthsInView(): void;
    /**
     *  This is responsible for updating the calendars
     */
    updateCalendars(): void;
    updateElement(): void;
    remove(): void;
    /**
     * this should calculate the label
     */
    calculateChosenLabel(): void;
    clickApply(e?: any): void;
    clickCancel(e: any): void;
    /**
     * called when month is changed
     * @param monthEvent get value in event.target.value
     * @param side left or right
     */
    monthChanged(monthEvent: any, side: SideEnum): void;
    /**
     * called when year is changed
     * @param yearEvent get value in event.target.value
     * @param side left or right
     */
    yearChanged(yearEvent: any, side: SideEnum): void;
    /**
     * called when time is changed
     * @param timeEvent  an event
     * @param side left or right
     */
    timeChanged(timeEvent: any, side: SideEnum): void;
    /**
     *  call when month or year changed
     * @param month month number 0 -11
     * @param year year eg: 1995
     * @param side left or right
     */
    monthOrYearChanged(month: number, year: number, side: SideEnum): void;
    /**
     * Click on previous month
     * @param side left or right calendar
     */
    clickPrev(side: SideEnum): void;
    /**
     * Click on next month
     * @param side left or right calendar
     */
    clickNext(side: SideEnum): void;
    /**
     * When hovering a date
     * @param e event: get value by e.target.value
     * @param side left or right
     * @param row row position of the current date clicked
     * @param col col position of the current date clicked
     */
    hoverDate(e: any, side: SideEnum, row: number, col: number): void;
    /**
     * When selecting a date
     * @param e event: get value by e.target.value
     * @param side left or right
     * @param row row position of the current date clicked
     * @param col col position of the current date clicked
     */
    clickDate(e: any, side: SideEnum, row: number, col: number): void;
    /**
     *  Click on the custom range
     * @param e: Event
     * @param label
     */
    clickRange(e: any, label: any): void;
    show(e?: any): void;
    hide(e?: any): void;
    /**
     * handle click on all element in the component, useful for outside of click
     * @param e event
     */
    handleInternalClick(e: any): void;
    /**
     * update the locale options
     * @param locale
     */
    updateLocale(locale: any): void;
    /**
     *  clear the daterange picker
     */
    clear(): void;
    /**
     * Find out if the selected range should be disabled if it doesn't
     * fit into minDate and maxDate limitations.
     */
    disableRange(range: any): any;
    /**
     *
     * @param date the date to add time
     * @param side left or right
     */
    private _getDateWithTime;
    /**
     *  build the locale config
     */
    private _buildLocale;
    private _buildCells;
    /**
     * Find out if the current calendar row has current month days
     * (as opposed to consisting of only previous/next month days)
     */
    hasCurrentMonthDays(currentMonth: any, row: any): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DaterangepickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DaterangepickerComponent, "ngx-daterangepicker-material", never, {
    "startDate": "startDate";
    "endDate": "endDate";
    "dateLimit": "dateLimit";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "autoApply": "autoApply";
    "singleDatePicker": "singleDatePicker";
    "showDropdowns": "showDropdowns";
    "showWeekNumbers": "showWeekNumbers";
    "showISOWeekNumbers": "showISOWeekNumbers";
    "linkedCalendars": "linkedCalendars";
    "autoUpdateInput": "autoUpdateInput";
    "alwaysShowCalendars": "alwaysShowCalendars";
    "maxSpan": "maxSpan";
    "lockStartDate": "lockStartDate";
    "timePicker": "timePicker";
    "timePicker24Hour": "timePicker24Hour";
    "timePickerIncrement": "timePickerIncrement";
    "timePickerSeconds": "timePickerSeconds";
    "showClearButton": "showClearButton";
    "firstMonthDayClass": "firstMonthDayClass";
    "lastMonthDayClass": "lastMonthDayClass";
    "emptyWeekRowClass": "emptyWeekRowClass";
    "emptyWeekColumnClass": "emptyWeekColumnClass";
    "firstDayOfNextMonthClass": "firstDayOfNextMonthClass";
    "lastDayOfPreviousMonthClass": "lastDayOfPreviousMonthClass";
    "showCancel": "showCancel";
    "keepCalendarOpeningWithRange": "keepCalendarOpeningWithRange";
    "showRangeLabelOnInput": "showRangeLabelOnInput";
    "customRangeDirection": "customRangeDirection";
    "closeOnAutoApply": "closeOnAutoApply";
    "locale": "locale";
    "ranges": "ranges";
    "isInvalidDate": "isInvalidDate";
    "isCustomDate": "isCustomDate";
    "isTooltipDate": "isTooltipDate";
    "showCustomRangeLabel": "showCustomRangeLabel";
    "drops": "drops";
    "opens": "opens";
}, {
    "choosedDate": "choosedDate";
    "rangeClicked": "rangeClicked";
    "datesUpdated": "datesUpdated";
    "startDateChanged": "startDateChanged";
    "endDateChanged": "endDateChanged";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,