import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export interface Coord {
    x: number;
    y: number;
}
export declare class NgxImageZoomComponent implements OnInit, OnChanges, OnDestroy {
    private renderer;
    private static readonly validZoomModes;
    zoomContainer: ElementRef;
    imageThumbnail: ElementRef;
    fullSizeImage: ElementRef;
    zoomScroll: EventEmitter<number>;
    zoomPosition: EventEmitter<Coord>;
    display: string;
    fullImageTop: number;
    fullImageLeft: number;
    magnifiedWidth: number;
    magnifiedHeight: number;
    lensTop: number;
    lensLeft: number;
    enableLens: boolean;
    lensBorderRadius: number;
    thumbImage: string;
    fullImage: string;
    thumbWidth: number;
    thumbHeight: number;
    fullWidth: number;
    fullHeight: number;
    lensWidth: number;
    lensHeight: number;
    private zoomMode;
    private magnification;
    private enableScrollZoom;
    private scrollStepSize;
    private circularLens;
    private baseRatio;
    private minZoomRatio;
    private maxZoomRatio;
    private xRatio;
    private yRatio;
    private offsetLeft;
    private offsetTop;
    private zoomingEnabled;
    private zoomFrozen;
    private isReady;
    private thumbImageLoaded;
    private fullImageLoaded;
    private latestMouseLeft;
    private latestMouseTop;
    private eventListeners;
    constructor(renderer: Renderer2);
    set setThumbImage(thumbImage: string);
    set setFullImage(fullImage: string);
    set setZoomMode(zoomMode: string);
    set setMagnification(magnification: number);
    set setMinZoomRatio(minZoomRatio: number);
    set setMaxZoomRatio(maxZoomRatio: number);
    set setScrollStepSize(stepSize: number);
    set setEnableLens(enable: boolean);
    set setLensWidth(width: number);
    set setLensHeight(height: number);
    set setCircularLens(enable: boolean);
    set setEnableScrollZoom(enable: boolean);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    /**
     * Template helper methods
     */
    onThumbImageLoaded(): void;
    onFullImageLoaded(): void;
    private setUpEventListeners;
    private checkImagesLoaded;
    /**
     * Zoom position setters
     */
    private setZoomPosition;
    /**
     * Mouse wheel event
     */
    private onMouseWheel;
    /**
     * Hover mode
     */
    private hoverMouseEnter;
    private hoverMouseLeave;
    private hoverMouseMove;
    /**
     * Toggle mode
     */
    private toggleClick;
    /**
     * Click mode
     */
    private clickStarter;
    private clickMouseLeave;
    private clickMouseMove;
    /**
     * Hover freeze mode
     */
    private hoverFreezeMouseEnter;
    private hoverFreezeMouseLeave;
    private hoverFreezeMouseMove;
    private hoverFreezeClick;
    /**
     * Private helper methods
     */
    private zoomOn;
    private zoomOff;
    private calculateZoomPosition;
    private calculateImageAndLensPosition;
    private calculateRatioAndOffset;
    private calculateRatio;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxImageZoomComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxImageZoomComponent, "lib-ngx-image-zoom", never, {
    "setThumbImage": "thumbImage";
    "setFullImage": "fullImage";
    "setZoomMode": "zoomMode";
    "setMagnification": "magnification";
    "setMinZoomRatio": "minZoomRatio";
    "setMaxZoomRatio": "maxZoomRatio";
    "setScrollStepSize": "scrollStepSize";
    "setEnableLens": "enableLens";
    "setLensWidth": "lensWidth";
    "setLensHeight": "lensHeight";
    "setCircularLens": "circularLens";
    "setEnableScrollZoom": "enableScrollZoom";
}, {
    "zoomScroll": "zoomScroll";
    "zoomPosition": "zoomPosition";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlLXpvb20uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5neC1pbWFnZS16b29tLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZ0hBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuZXhwb3J0IGludGVyZmFjZSBDb29yZCB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmd4SW1hZ2Vab29tQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgdmFsaWRab29tTW9kZXM7XHJcbiAgICB6b29tQ29udGFpbmVyOiBFbGVtZW50UmVmO1xyXG4gICAgaW1hZ2VUaHVtYm5haWw6IEVsZW1lbnRSZWY7XHJcbiAgICBmdWxsU2l6ZUltYWdlOiBFbGVtZW50UmVmO1xyXG4gICAgem9vbVNjcm9sbDogRXZlbnRFbWl0dGVyPG51bWJlcj47XHJcbiAgICB6b29tUG9zaXRpb246IEV2ZW50RW1pdHRlcjxDb29yZD47XHJcbiAgICBkaXNwbGF5OiBzdHJpbmc7XHJcbiAgICBmdWxsSW1hZ2VUb3A6IG51bWJlcjtcclxuICAgIGZ1bGxJbWFnZUxlZnQ6IG51bWJlcjtcclxuICAgIG1hZ25pZmllZFdpZHRoOiBudW1iZXI7XHJcbiAgICBtYWduaWZpZWRIZWlnaHQ6IG51bWJlcjtcclxuICAgIGxlbnNUb3A6IG51bWJlcjtcclxuICAgIGxlbnNMZWZ0OiBudW1iZXI7XHJcbiAgICBlbmFibGVMZW5zOiBib29sZWFuO1xyXG4gICAgbGVuc0JvcmRlclJhZGl1czogbnVtYmVyO1xyXG4gICAgdGh1bWJJbWFnZTogc3RyaW5nO1xyXG4gICAgZnVsbEltYWdlOiBzdHJpbmc7XHJcbiAgICB0aHVtYldpZHRoOiBudW1iZXI7XHJcbiAgICB0aHVtYkhlaWdodDogbnVtYmVyO1xyXG4gICAgZnVsbFdpZHRoOiBudW1iZXI7XHJcbiAgICBmdWxsSGVpZ2h0OiBudW1iZXI7XHJcbiAgICBsZW5zV2lkdGg6IG51bWJlcjtcclxuICAgIGxlbnNIZWlnaHQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgem9vbU1vZGU7XHJcbiAgICBwcml2YXRlIG1hZ25pZmljYXRpb247XHJcbiAgICBwcml2YXRlIGVuYWJsZVNjcm9sbFpvb207XHJcbiAgICBwcml2YXRlIHNjcm9sbFN0ZXBTaXplO1xyXG4gICAgcHJpdmF0ZSBjaXJjdWxhckxlbnM7XHJcbiAgICBwcml2YXRlIGJhc2VSYXRpbztcclxuICAgIHByaXZhdGUgbWluWm9vbVJhdGlvO1xyXG4gICAgcHJpdmF0ZSBtYXhab29tUmF0aW87XHJcbiAgICBwcml2YXRlIHhSYXRpbztcclxuICAgIHByaXZhdGUgeVJhdGlvO1xyXG4gICAgcHJpdmF0ZSBvZmZzZXRMZWZ0O1xyXG4gICAgcHJpdmF0ZSBvZmZzZXRUb3A7XHJcbiAgICBwcml2YXRlIHpvb21pbmdFbmFibGVkO1xyXG4gICAgcHJpdmF0ZSB6b29tRnJvemVuO1xyXG4gICAgcHJpdmF0ZSBpc1JlYWR5O1xyXG4gICAgcHJpdmF0ZSB0aHVtYkltYWdlTG9hZGVkO1xyXG4gICAgcHJpdmF0ZSBmdWxsSW1hZ2VMb2FkZWQ7XHJcbiAgICBwcml2YXRlIGxhdGVzdE1vdXNlTGVmdDtcclxuICAgIHByaXZhdGUgbGF0ZXN0TW91c2VUb3A7XHJcbiAgICBwcml2YXRlIGV2ZW50TGlzdGVuZXJzO1xyXG4gICAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyMik7XHJcbiAgICBzZXQgc2V0VGh1bWJJbWFnZSh0aHVtYkltYWdlOiBzdHJpbmcpO1xyXG4gICAgc2V0IHNldEZ1bGxJbWFnZShmdWxsSW1hZ2U6IHN0cmluZyk7XHJcbiAgICBzZXQgc2V0Wm9vbU1vZGUoem9vbU1vZGU6IHN0cmluZyk7XHJcbiAgICBzZXQgc2V0TWFnbmlmaWNhdGlvbihtYWduaWZpY2F0aW9uOiBudW1iZXIpO1xyXG4gICAgc2V0IHNldE1pblpvb21SYXRpbyhtaW5ab29tUmF0aW86IG51bWJlcik7XHJcbiAgICBzZXQgc2V0TWF4Wm9vbVJhdGlvKG1heFpvb21SYXRpbzogbnVtYmVyKTtcclxuICAgIHNldCBzZXRTY3JvbGxTdGVwU2l6ZShzdGVwU2l6ZTogbnVtYmVyKTtcclxuICAgIHNldCBzZXRFbmFibGVMZW5zKGVuYWJsZTogYm9vbGVhbik7XHJcbiAgICBzZXQgc2V0TGVuc1dpZHRoKHdpZHRoOiBudW1iZXIpO1xyXG4gICAgc2V0IHNldExlbnNIZWlnaHQoaGVpZ2h0OiBudW1iZXIpO1xyXG4gICAgc2V0IHNldENpcmN1bGFyTGVucyhlbmFibGU6IGJvb2xlYW4pO1xyXG4gICAgc2V0IHNldEVuYWJsZVNjcm9sbFpvb20oZW5hYmxlOiBib29sZWFuKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVGVtcGxhdGUgaGVscGVyIG1ldGhvZHNcclxuICAgICAqL1xyXG4gICAgb25UaHVtYkltYWdlTG9hZGVkKCk6IHZvaWQ7XHJcbiAgICBvbkZ1bGxJbWFnZUxvYWRlZCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBzZXRVcEV2ZW50TGlzdGVuZXJzO1xyXG4gICAgcHJpdmF0ZSBjaGVja0ltYWdlc0xvYWRlZDtcclxuICAgIC8qKlxyXG4gICAgICogWm9vbSBwb3NpdGlvbiBzZXR0ZXJzXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc2V0Wm9vbVBvc2l0aW9uO1xyXG4gICAgLyoqXHJcbiAgICAgKiBNb3VzZSB3aGVlbCBldmVudFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIG9uTW91c2VXaGVlbDtcclxuICAgIC8qKlxyXG4gICAgICogSG92ZXIgbW9kZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGhvdmVyTW91c2VFbnRlcjtcclxuICAgIHByaXZhdGUgaG92ZXJNb3VzZUxlYXZlO1xyXG4gICAgcHJpdmF0ZSBob3Zlck1vdXNlTW92ZTtcclxuICAgIC8qKlxyXG4gICAgICogVG9nZ2xlIG1vZGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSB0b2dnbGVDbGljaztcclxuICAgIC8qKlxyXG4gICAgICogQ2xpY2sgbW9kZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNsaWNrU3RhcnRlcjtcclxuICAgIHByaXZhdGUgY2xpY2tNb3VzZUxlYXZlO1xyXG4gICAgcHJpdmF0ZSBjbGlja01vdXNlTW92ZTtcclxuICAgIC8qKlxyXG4gICAgICogSG92ZXIgZnJlZXplIG1vZGVcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBob3ZlckZyZWV6ZU1vdXNlRW50ZXI7XHJcbiAgICBwcml2YXRlIGhvdmVyRnJlZXplTW91c2VMZWF2ZTtcclxuICAgIHByaXZhdGUgaG92ZXJGcmVlemVNb3VzZU1vdmU7XHJcbiAgICBwcml2YXRlIGhvdmVyRnJlZXplQ2xpY2s7XHJcbiAgICAvKipcclxuICAgICAqIFByaXZhdGUgaGVscGVyIG1ldGhvZHNcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSB6b29tT247XHJcbiAgICBwcml2YXRlIHpvb21PZmY7XHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVpvb21Qb3NpdGlvbjtcclxuICAgIHByaXZhdGUgY2FsY3VsYXRlSW1hZ2VBbmRMZW5zUG9zaXRpb247XHJcbiAgICBwcml2YXRlIGNhbGN1bGF0ZVJhdGlvQW5kT2Zmc2V0O1xyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVSYXRpbztcclxufVxyXG4iXX0=