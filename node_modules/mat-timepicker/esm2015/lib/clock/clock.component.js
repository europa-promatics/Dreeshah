import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import { getIsAvailabeFn } from '../util';
export class ClockComponent {
    constructor() {
        this.color = 'primary';
        this.changeEvent = new EventEmitter();
        this.unavailableSelection = new EventEmitter();
        this.invalidMeridiem = new EventEmitter();
        this.invalidSelection = new EventEmitter();
        this.clearInvalidMeridiem = new EventEmitter();
        this.allowed12HourMap = null;
        this.allowed24HourMap = null;
        this.isFormattedValueAllowed = true;
        this.meridiem = null;
        this.touching = false;
        this.numbers = [];
        this.secondaryNumbers = [];
        this.minuteDots = [];
        this.invalidMeridiemEmitted = true;
        this.handleTouchMove = (e) => {
            e.preventDefault(); // prevent scrolling behind the clock on iOS
            const rect = e.target.getBoundingClientRect();
            this.movePointer(e.changedTouches[0].clientX - rect.left, e.changedTouches[0].clientY - rect.top);
        };
    }
    initIsAllowedFn() {
        if (!this.allowed12HourMap && !this.allowed24HourMap) {
            return;
        }
        this.isAvailableFn = getIsAvailabeFn(this.allowed12HourMap, this.allowed24HourMap, this.mode);
    }
    isAvailable(value) {
        return this.isAvailableFn ? this.isAvailableFn(value, this.viewType, this.isPm, this.formattedHours) : true;
    }
    ngOnChanges(simpleChanges) {
        if (simpleChanges.allowed12HourMap ||
            simpleChanges.allowed24HourMap ||
            (simpleChanges.mode && !simpleChanges.mode.firstChange)) {
            this.initIsAllowedFn();
        }
        this.calculateAngule();
        this.setNumbers();
        this.meridiem = this.isPm ? 'PM' : 'AM';
        if (simpleChanges.formattedValue && (this.allowed12HourMap || this.allowed24HourMap)) {
            this.isFormattedValueAllowed = this.isAvailable(this.formattedValue);
        }
        const isSelectedTimeAvailable = (this.isAvailableFn) ?
            // when calling isAvailableFn here we should always set the viewType to minutes because we want to check the hours and the minutes
            this.isAvailableFn(this.minutes, 'minutes', this.isPm, this.formattedHours) : true;
        // if (this.mode === '24h' && this.viewType === 'minutes' && this.isAvailableFn) {
        //   const areMinitesAvailable = this.isAvailableFn(this.minutes, 'minutes', this.isPm, this.formattedHours);
        //   if (!areMinitesAvailable) {
        //     if (this.minDate && this.minDate.getMinutes() > this.minutes) {
        //       setTimeout(() => { this.changeEvent.emit({ value: this.minDate.getMinutes(), type: 'minutes' }); });
        //     } else {
        //       setTimeout(() => { this.changeEvent.emit({ value: this.maxDate.getMinutes(), type: 'minutes' }); });
        //     }
        //   }
        // }
        if (isSelectedTimeAvailable && this.invalidMeridiemEmitted) {
            this.clearInvalidMeridiem.emit();
            this.invalidMeridiemEmitted = false;
        }
        this.invalidSelection.emit(!isSelectedTimeAvailable);
    }
    calculateAngule() {
        this.angle = this.getPointerAngle(this.formattedValue, this.viewType);
    }
    setNumbers() {
        if (this.viewType === 'hours') {
            if (this.mode === '12h') {
                const meridiem = this.isPm ? 'pm' : 'am';
                const isAllowedFn = this.allowed12HourMap ? num => this.allowed12HourMap[meridiem][num + 1][0] : undefined;
                this.numbers = this.getNumbers(12, { size: 256 }, isAllowedFn);
                this.secondaryNumbers = [];
                this.minuteDots = [];
            }
            else if (this.mode === '24h') {
                const isAllowedFn = this.allowed24HourMap ? num => this.allowed24HourMap[num][0] : undefined;
                this.numbers = this.getNumbers(12, { size: 256 }, isAllowedFn);
                this.secondaryNumbers = this.getNumbers(12, { size: 256 - 64, start: 13 }, isAllowedFn);
                this.minuteDots = [];
            }
        }
        else {
            const meridiem = this.isPm ? 'pm' : 'am';
            const isAllowedFn = !!this.allowed12HourMap ? num => this.allowed12HourMap[meridiem][this.formattedHours][num] :
                !!this.allowed24HourMap ? num => this.allowed24HourMap[this.formattedHours][num] : undefined;
            this.numbers = this.getNumbers(12, { size: 256, start: 5, step: 5 }, isAllowedFn);
            this.minuteDots = this.getNumbers(60, { size: 256, start: 13 }).map(digit => {
                if (digit.display <= 59) {
                    digit.allowed = isAllowedFn ? isAllowedFn(digit.display) : true;
                    return digit;
                }
                digit.display = digit.display - 60;
                digit.allowed = isAllowedFn ? isAllowedFn(digit.display) : true;
                return digit;
            });
            this.secondaryNumbers = [];
        }
    }
    disableAnimatedPointer() {
        this.touching = true;
    }
    enableAnimatedPointer() {
        this.touching = false;
    }
    handleTouchEnd(e) {
        this.handleTouchMove(e);
        this.enableAnimatedPointer();
    }
    handleMouseMove(e) {
        // MouseEvent.which is deprecated, but MouseEvent.buttons is not supported in Safari
        if ((e.buttons === 1 || e.which === 1) && this.touching) {
            const rect = e.target.getBoundingClientRect();
            this.movePointer(e.clientX - rect.left, e.clientY - rect.top);
        }
    }
    handleClick(e) {
        const rect = e.target.getBoundingClientRect();
        this.movePointer(e.clientX - rect.left, e.clientY - rect.top);
    }
    movePointer(x, y) {
        const value = this.getPointerValue(x, y, 256);
        if (!this.isAvailable(value)) {
            this.unavailableSelection.emit();
            return;
        }
        if (value !== this.formattedValue) {
            this.changeEvent.emit({ value, type: this.viewType });
            if (this.viewType !== 'minutes') {
                if (!this.isAvailable(value)) {
                    if (this.minDate && this.isAvailable(value)) {
                        this.changeEvent.emit({ value: this.minDate.getMinutes(), type: 'minutes' });
                    }
                    else if (this.maxDate && this.isAvailable(value)) {
                        this.changeEvent.emit({ value: this.maxDate.getMinutes(), type: 'minutes' });
                    }
                }
            }
        }
    }
    getNumbers(count, { size, start = 1, step = 1 }, isAllowedFn) {
        return Array.apply(null, Array(count)).map((_, i) => ({
            display: i * step + start,
            translateX: (size / 2 - 20) * Math.cos(2 * Math.PI * (i - 2) / count),
            translateY: (size / 2 - 20) * Math.sin(2 * Math.PI * (i - 2) / count),
            allowed: isAllowedFn ? isAllowedFn(i) : true
        }));
    }
    getPointerAngle(value, mode) {
        if (this.viewType === 'hours') {
            return this.mode === '12h' ? 360 / 12 * (value - 3) : 360 / 12 * (value % 12 - 3);
        }
        return 360 / 60 * (value - 15);
    }
    getPointerValue(x, y, size) {
        let value;
        let angle = Math.atan2(size / 2 - x, size / 2 - y) / Math.PI * 180;
        if (angle < 0) {
            angle = 360 + angle;
        }
        if (this.viewType === 'hours') {
            if (this.mode === '12h') {
                value = 12 - Math.round(angle * 12 / 360);
                return value === 0 ? 12 : value;
            }
            const radius = Math.sqrt(Math.pow(size / 2 - x, 2) + Math.pow(size / 2 - y, 2));
            value = 12 - Math.round(angle * 12 / 360);
            if (value === 0) {
                value = 12;
            }
            if (radius < size / 2 - 32) {
                value = value === 12 ? 0 : value + 12;
            }
            return value;
        }
        value = Math.round(60 - 60 * angle / 360);
        return value === 60 ? 0 : value;
    }
}
ClockComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-clock',
                template: "<div class=\"root\">\n  <div class=\"circle\" (touchmove)=\"handleTouchMove($event)\" (mousemove)=\"handleMouseMove($event)\"\n    (touchstart)=\"disableAnimatedPointer()\" (mousedown)=\"disableAnimatedPointer()\" (touchend)=\"handleTouchEnd($event)\"\n    (mouseup)=\"enableAnimatedPointer()\" (click)=\"handleClick($event)\">\n    <div class=\"pointer-container\"\n      [ngClass]=\"{ 'small-pointer': mode === '24h' && viewType === 'hours' && (formattedValue === 0 || formattedValue > 12), 'animated-pointer': !touching }\"\n      [style.transform]=\"'rotate(' + angle + 'deg)'\">\n      <button mat-mini-fab [color]=\"color\" class=\"inner-dot\"></button>\n      <mat-toolbar [color]=\"color\" class=\"pointer\">\n        <button mat-mini-fab [color]=\"color\" class=\"outer-dot\"\n          [ngClass]=\" { 'outer-dot-odd': viewType === 'minutes' && formattedValue % 5 !== 0 }\">\n          <ng-container *ngIf=\"viewType === 'minutes' && formattedValue % 5 !== 0\">\u00B7</ng-container>\n        </button>\n      </mat-toolbar>\n    </div>\n    <ng-container *ngFor=\"let digit of minuteDots;\">\n      <button mat-mini-fab class=\"number minute-dot\"\n        [ngClass]=\"{ 'selected': formattedValue === digit.display || (digit.display === 0 && formattedValue === 0), 'disabled': !isAvailable(digit.display === 60 ? 0 : digit.display)}\"\n        [style.transform]=\"'translate(' + digit.translateX + 'px, ' + digit.translateY + 'px)'\">\n        <ng-container *ngIf=\"digit.display % 5 !== 0\">\u00B7</ng-container>\n      </button>\n    </ng-container>\n    <ng-container *ngFor=\"let digit of numbers;\">\n      <button mat-mini-fab [color]=\"color\" class=\"number\"\n        [ngClass]=\"{ 'selected': formattedValue === digit.display || (digit.display === 60 && formattedValue === 0), 'disabled': !isAvailable(digit.display === 60 ? 0 : digit.display)}\"\n        [style.transform]=\"'translate(' + digit.translateX + 'px, ' + digit.translateY + 'px)'\">\n        <ng-template #hoursTemplate>{{ digit.display }}</ng-template>\n        <ng-template #minutesTemplate>{{ digit.display === 60 ? '00' : digit.display }}</ng-template>\n        <ng-container *ngIf=\"viewType === 'minutes' then minutesTemplate else hoursTemplate;\"></ng-container>\n      </button>\n\n    </ng-container>\n    <ng-container *ngFor=\"let digit of secondaryNumbers;\">\n      <button mat-mini-fab [color]=\"color\" class=\"number small-number\"\n        [ngClass]=\"{ 'selected': formattedValue === digit.display || (digit.display === 24 && formattedValue === 0), 'disabled': !isAvailable(digit.display === 24 ? 0 : digit.display)}\"\n        [style.transform]=\"'translate(' + digit.translateX + 'px, ' + digit.translateY + 'px)'\">\n        {{ digit.display === 24 ? '00' : digit.display }}\n      </button>\n\n    </ng-container>\n  </div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".root{cursor:default}.circle,.root{height:256px;width:256px}.circle{background:#ededed;border-radius:50%;cursor:pointer;position:relative}.number{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;align-items:center;background-color:transparent;box-shadow:none;cursor:pointer;display:flex;flex-direction:column;font-size:14px;height:32px;justify-content:center;left:calc(50% - 16px);line-height:32px;pointer-events:none;position:absolute;text-align:center;top:calc(50% - 16px);user-select:none;width:32px}.number.disabled{color:rgba(1,1,1,.1)}.number:not(.selected):not(.disabled){color:rgba(0,0,0,.87)}.number:not(.disabled).minute-dot{color:rgba(1,1,1,.7)}.number:not(.disabled).minute-dot.selected{color:transparent}.small-number{font-size:12px}.small-number:not(.selected):not(.disabled){color:rgba(0,0,0,.67)}.pointer-container{height:2;left:50%;pointer-events:none;position:absolute;top:calc(50% - 1px);transform-origin:left center;width:calc(50% - 20px)}.pointer-container.disabled *{background-color:transparent}.pointer{height:1px}.animated-pointer{transition:all .2s ease-out}.small-pointer{width:calc(50% - 52px)}.inner-dot{height:8px;left:-4px;top:-3px;width:8px}.inner-dot,.outer-dot{border-radius:50%;box-shadow:none;position:absolute}.outer-dot{box-sizing:content-box;height:32px;right:-16px;width:32px}.outer-dot-odd{align-items:center;box-shadow:none;display:flex;flex-direction:column;height:32px;justify-content:center;width:32px}"]
            },] }
];
ClockComponent.propDecorators = {
    mode: [{ type: Input }],
    viewType: [{ type: Input }],
    color: [{ type: Input }],
    formattedValue: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    isPm: [{ type: Input }],
    formattedHours: [{ type: Input }],
    minutes: [{ type: Input }],
    changeEvent: [{ type: Output }],
    unavailableSelection: [{ type: Output }],
    invalidMeridiem: [{ type: Output }],
    invalidSelection: [{ type: Output }],
    clearInvalidMeridiem: [{ type: Output }],
    allowed12HourMap: [{ type: Input }],
    allowed24HourMap: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWF0LXRpbWVwaWNrZXIvc3JjL2xpYi9jbG9jay9jbG9jay5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBNEIsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUgsT0FBTyxFQUFhLGVBQWUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQVFyRCxNQUFNLE9BQU8sY0FBYztJQU4zQjtRQVVXLFVBQUssR0FBRyxTQUFTLENBQUM7UUFPakIsZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUN6RCx5QkFBb0IsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUNsRSxvQkFBZSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQzdELHFCQUFnQixHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQzlELHlCQUFvQixHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBRW5FLHFCQUFnQixHQUFHLElBQUksQ0FBQztRQUN4QixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFFakMsNEJBQXVCLEdBQUcsSUFBSSxDQUFDO1FBSS9CLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFDaEIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQixZQUFPLEdBQWtCLEVBQUUsQ0FBQztRQUM1QixxQkFBZ0IsR0FBa0IsRUFBRSxDQUFDO1FBQ3JDLGVBQVUsR0FBa0IsRUFBRSxDQUFDO1FBQy9CLDJCQUFzQixHQUFHLElBQUksQ0FBQztRQWtHOUIsb0JBQWUsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFO1lBQzNCLENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLDRDQUE0QztZQUNoRSxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsTUFBTSxD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QUU7WUFDaEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQUUsS0FBSyxHQUFHLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQzthQUFFO1lBQ3RFLE9BQU8sS0FBSyxDQUFDO1NBRWQ7UUFFRCxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMxQyxPQUFPLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQ2xDLENBQUM7OztZQTFORixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLHl4RkFBcUM7Z0JBRXJDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOzthQUNoRDs7O21CQUdFLEtBQUs7dUJBQ0wsS0FBSztvQkFDTCxLQUFLOzZCQUNMLEtBQUs7c0JBQ0wsS0FBSztzQkFDTCxLQUFLO21CQUNMLEtBQUs7NkJBQ0wsS0FBSztzQkFDTCxLQUFLOzBCQUNMLE1BQU07bUNBQ04sTUFBTTs4QkFDTixNQUFNOytCQUNOLE1BQU07bUNBQ04sTUFBTTsrQkFFTixLQUFLOytCQUNMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xvY2tWaWV3VHlwZSwgQ2xvY2tOdW1iZXIsIElUaW1lRGF0YSwgQ2xvY2tNb2RlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy1hbmQtdHlwZXMnO1xuaW1wb3J0IHsgaXNBbGxvd2VkLCBnZXRJc0F2YWlsYWJlRm4gfSBmcm9tICcuLi91dGlsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWF0LWNsb2NrJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2Nsb2NrLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vY2xvY2suY29tcG9uZW50LnNjc3MnXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ2xvY2tDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gIEBJbnB1dCgpIG1vZGU6IENsb2NrTW9kZTtcbiAgQElucHV0KCkgdmlld1R5cGU6IENsb2NrVmlld1R5cGU7XG4gIEBJbnB1dCgpIGNvbG9yID0gJ3ByaW1hcnknO1xuICBASW5wdXQoKSBmb3JtYXR0ZWRWYWx1ZTogbnVtYmVyO1xuICBASW5wdXQoKSBtaW5EYXRlOiBEYXRlO1xuICBASW5wdXQoKSBtYXhEYXRlOiBEYXRlO1xuICBASW5wdXQoKSBpc1BtOiBib29sZWFuO1xuICBASW5wdXQoKSBmb3JtYXR0ZWRIb3VyczogbnVtYmVyO1xuICBASW5wdXQoKSBtaW51dGVzOiBudW1iZXI7XG4gIEBPdXRwdXQoKSBjaGFuZ2VFdmVudDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIHVuYXZhaWxhYmxlU2VsZWN0aW9uOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgaW52YWxpZE1lcmlkaWVtOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgaW52YWxpZFNlbGVjdGlvbjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIGNsZWFySW52YWxpZE1lcmlkaWVtOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIEBJbnB1dCgpIGFsbG93ZWQxMkhvdXJNYXAgPSBudWxsO1xuICBASW5wdXQoKSBhbGxvd2VkMjRIb3VyTWFwID0gbnVsbDtcblxuICBpc0Zvcm1hdHRlZFZhbHVlQWxsb3dlZCA9IHRydWU7XG5cbiAgaXNBdmFpbGFibGVGbjogUmV0dXJuVHlwZTx0eXBlb2YgZ2V0SXNBdmFpbGFiZUZuPjtcblxuICBtZXJpZGllbSA9IG51bGw7XG4gIHRvdWNoaW5nID0gZmFsc2U7XG4gIGFuZ2xlOiBudW1iZXI7XG4gIG51bWJlcnM6IENsb2NrTnVtYmVyW10gPSBbXTtcbiAgc2Vjb25kYXJ5TnVtYmVyczogQ2xvY2tOdW1iZXJbXSA9IFtdO1xuICBtaW51dGVEb3RzOiBDbG9ja051bWJlcltdID0gW107XG4gIGludmFsaWRNZXJpZGllbUVtaXR0ZWQgPSB0cnVlO1xuXG4gIGluaXRJc0FsbG93ZWRGbigpIHtcbiAgICBpZiAoIXRoaXMuYWxsb3dlZDEySG91ck1hcCAmJiAhdGhpcy5hbGxvd2VkMjRIb3VyTWFwKSB7IHJldHVybjsgfVxuICAgIHRoaXMuaXNBdmFpbGFibGVGbiA9IGdldElzQXZhaWxhYmVGbih0aGlzLmFsbG93ZWQxMkhvdXJNYXAsIHRoaXMuYWxsb3dlZDI0SG91ck1hcCwgdGhpcy5tb2RlKTtcbiAgfVxuXG4gIGlzQXZhaWxhYmxlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNBdmFpbGFibGVGbiA/IHRoaXMuaXNBdmFpbGFibGVGbih2YWx1ZSwgdGhpcy52aWV3VHlwZSwgdGhpcy5pc1BtLCB0aGlzLmZvcm1hdHRlZEhvdXJzKSA6IHRydWU7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhzaW1wbGVDaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG5cbiAgICBpZiAoXG4gICAgICBzaW1wbGVDaGFuZ2VzLmFsbG93ZWQxMkhvdXJNYXAgfHxcbiAgICAgIHNpbXBsZUNoYW5nZXMuYWxsb3dlZDI0SG91ck1hcCB8fFxuICAgICAgKHNpbXBsZUNoYW5nZXMubW9kZSAmJiAhc2ltcGxlQ2hhbmdlcy5tb2RlLmZpcnN0Q2hhbmdlKVxuICAgICkge1xuICAgICAgdGhpcy5pbml0SXNBbGxvd2VkRm4oKTtcbiAgICB9XG5cbiAgICB0aGlzLmNhbGN1bGF0ZUFuZ3VsZSgpO1xuICAgIHRoaXMuc2V0TnVtYmVycygpO1xuICAgIHRoaXMubWVyaWRpZW0gPSB0aGlzLmlzUG0gPyAnUE0nIDogJ0FNJztcblxuICAgIGlmIChzaW1wbGVDaGFuZ2VzLmZvcm1hdHRlZFZhbHVlICYmICh0aGlzLmFsbG93ZWQxMkhvdXJNYXAgfHwgdGhpcy5hbGxvd2VkMjRIb3VyTWFwKSkge1xuICAgICAgdGhpcy5pc0Zvcm1hdHRlZFZhbHVlQWxsb3dlZCA9IHRoaXMuaXNBdmFpbGFibGUodGhpcy5mb3JtYXR0ZWRWYWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNTZWxlY3RlZFRpbWVBdmFpbGFibGUgPSAodGhpcy5pc0F2YWlsYWJsZUZuKSA/XG4gICAgICAvLyB3aGVuIGNhbGxpbmcgaXNBdmFpbGFibGVGbiBoZXJlIHdlIHNob3VsZCBhbHdheXMgc2V0IHRoZSB2aWV3VHlwZSB0byBtaW51dGVzIGJlY2F1c2Ugd2Ugd2FudCB0byBjaGVjayB0aGUgaG91cnMgYW5kIHRoZSBtaW51dGVzXG4gICAgICB0aGlzLmlzQXZhaWxhYmxlRm4odGhpcy5taW51dGVzLCAnbWludXRlcycsIHRoaXMuaXNQbSwgdGhpcy5mb3JtYXR0ZWRIb3VycykgOiB0cnVlO1xuXG4gICAgLy8gaWYgKHRoaXMubW9kZSA9PT0gJzI0aCcgJiYgdGhpcy52aWV3VHlwZSA9PT0gJ21pbnV0ZXMnICYmIHRoaXMuaXNBdmFpbGFibGVGbikge1xuICAgIC8vICAgY29uc3QgYXJlTWluaXRlc0F2YWlsYWJsZSA9IHRoaXMuaXNBdmFpbGFibGVGbih0aGlzLm1pbnV0ZXMsICdtaW51dGVzJywgdGhpcy5pc1BtLCB0aGlzLmZvcm1hdHRlZEhvdXJzKTtcbiAgICAvLyAgIGlmICghYXJlTWluaXRlc0F2YWlsYWJsZSkge1xuICAgIC8vICAgICBpZiAodGhpcy5taW5EYXRlICYmIHRoaXMubWluRGF0ZS5nZXRNaW51dGVzKCkgPiB0aGlzLm1pbnV0ZXMpIHtcbiAgICAvLyAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5jaGFuZ2VFdmVudC5lbWl0KHsgdmFsdWU6IHRoaXMubWluRGF0ZS5nZXRNaW51dGVzKCksIHR5cGU6ICdtaW51dGVzJyB9KTsgfSk7XG4gICAgLy8gICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuY2hhbmdlRXZlbnQuZW1pdCh7IHZhbHVlOiB0aGlzLm1heERhdGUuZ2V0TWludXRlcygpLCB0eXBlOiAnbWludXRlcycgfSk7IH0pO1xuICAgIC8vICAgICB9XG4gICAgLy8gICB9XG4gICAgLy8gfVxuXG4gICAgaWYgKGlzU2VsZWN0ZWRUaW1lQXZhaWxhYmxlICYmIHRoaXMuaW52YWxpZE1lcmlkaWVtRW1pdHRlZCkge1xuICAgICAgdGhpcy5jbGVhckludmFsaWRNZXJpZGllbS5lbWl0KCk7XG4gICAgICB0aGlzLmludmFsaWRNZXJpZGllbUVtaXR0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmludmFsaWRTZWxlY3Rpb24uZW1pdCghaXNTZWxlY3RlZFRpbWVBdmFpbGFibGUpO1xuICB9XG5cbiAgY2FsY3VsYXRlQW5ndWxlKCkge1xuICAgIHRoaXMuYW5nbGUgPSB0aGlzLmdldFBvaW50ZXJBbmdsZSh0aGlzLmZvcm1hdHRlZFZhbHVlLCB0aGlzLnZpZXdUeXBlKTtcbiAgfVxuXG4gIHNldE51bWJlcnMoKSB7XG4gICAgaWYgKHRoaXMudmlld1R5cGUgPT09ICdob3VycycpIHtcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09ICcxMmgnKSB7XG4gICAgICAgIGNvbnN0IG1lcmlkaWVtID0gdGhpcy5pc1BtID8gJ3BtJyA6ICdhbSc7XG4gICAgICAgIGNvbnN0IGlzQWxsb3dlZEZuID0gdGhpcy5hbGxvd2VkMTJIb3VyTWFwID8gbnVtID0+IHRoaXMuYWxsb3dlZDEySG91ck1hcFttZXJpZGllbV1bbnVtICsgMV1bMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubnVtYmVycyA9IHRoaXMuZ2V0TnVtYmVycygxMiwgeyBzaXplOiAyNTYgfSwgaXNBbGxvd2VkRm4pO1xuICAgICAgICB0aGlzLnNlY29uZGFyeU51bWJlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5taW51dGVEb3RzID0gW107XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gJzI0aCcpIHtcbiAgICAgICAgY29uc3QgaXNBbGxvd2VkRm4gPSB0aGlzLmFsbG93ZWQyNEhvdXJNYXAgPyBudW0gPT4gdGhpcy5hbGxvd2VkMjRIb3VyTWFwW251bV1bMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubnVtYmVycyA9IHRoaXMuZ2V0TnVtYmVycygxMiwgeyBzaXplOiAyNTYgfSwgaXNBbGxvd2VkRm4pO1xuICAgICAgICB0aGlzLnNlY29uZGFyeU51bWJlcnMgPSB0aGlzLmdldE51bWJlcnMoMTIsIHsgc2l6ZTogMjU2IC0gNjQsIHN0YXJ0OiAxMyB9LCBpc0FsbG93ZWRGbik7XG4gICAgICAgIHRoaXMubWludXRlRG90cyA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBtZXJpZGllbSA9IHRoaXMuaXNQbSA/ICdwbScgOiAnYW0nO1xuICAgICAgY29uc3QgaXNBbGxvd2VkRm4gPVxuICAgICAgICAhIXRoaXMuYWxsb3dlZDEySG91ck1hcCA/IG51bSA9PiB0aGlzLmFsbG93ZWQxMkhvdXJNYXBbbWVyaWRpZW1dW3RoaXMuZm9ybWF0dGVkSG91cnNdW251bV0gOlxuICAgICAgICAgICEhdGhpcy5hbGxvd2VkMjRIb3VyTWFwID8gbnVtID0+IHRoaXMuYWxsb3dlZDI0SG91ck1hcFt0aGlzLmZvcm1hdHRlZEhvdXJzXVtudW1dIDogdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLm51bWJlcnMgPSB0aGlzLmdldE51bWJlcnMoMTIsIHsgc2l6ZTogMjU2LCBzdGFydDogNSwgc3RlcDogNSB9LCBpc0FsbG93ZWRGbik7XG4gICAgICB0aGlzLm1pbnV0ZURvdHMgPSB0aGlzLmdldE51bWJlcnMoNjAsIHsgc2l6ZTogMjU2LCBzdGFydDogMTMgfSkubWFwKGRpZ2l0ID0+IHtcbiAgICAgICAgaWYgKGRpZ2l0LmRpc3BsYXkgPD0gNTkpIHtcbiAgICAgICAgICBkaWdpdC5hbGxvd2VkID0gaXNBbGxvd2VkRm4gPyBpc0FsbG93ZWRGbihkaWdpdC5kaXNwbGF5KSA6IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGRpZ2l0O1xuICAgICAgICB9XG4gICAgICAgIGRpZ2l0LmRpc3BsYXkgPSBkaWdpdC5kaXNwbGF5IC0gNjA7XG4gICAgICAgIGRpZ2l0LmFsbG93ZWQgPSBpc0FsbG93ZWRGbiA/IGlzQWxsb3dlZEZuKGRpZ2l0LmRpc3BsYXkpIDogdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGRpZ2l0O1xuICAgICAgfSk7XG4gICAgICB0aGlzLnNlY29uZGFyeU51bWJlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICBkaXNhYmxlQW5pbWF0ZWRQb2ludGVyKCkge1xuICAgIHRoaXMudG91Y2hpbmcgPSB0cnVlO1xuICB9XG5cbiAgZW5hYmxlQW5pbWF0ZWRQb2ludGVyKCkge1xuICAgIHRoaXMudG91Y2hpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIGhhbmRsZVRvdWNoTW92ZSA9IChlOiBhbnkpID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nIGJlaGluZCB0aGUgY2xvY2sgb24gaU9TXG4gICAgY29uc3QgcmVjdCA9IGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMubW92ZVBvaW50ZXIoZS5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYIC0gcmVjdC5sZWZ0LCBlLmNoYW5nZWRUb3VjaGVzWzBdLmNsaWVudFkgLSByZWN0LnRvcCk7XG4gIH1cblxuICBoYW5kbGVUb3VjaEVuZChlOiBhbnkpIHtcbiAgICB0aGlzLmhhbmRsZVRvdWNoTW92ZShlKTtcbiAgICB0aGlzLmVuYWJsZUFuaW1hdGVkUG9pbnRlcigpO1xuICB9XG5cbiAgaGFuZGxlTW91c2VNb3ZlKGU6IGFueSkge1xuICAgIC8vIE1vdXNlRXZlbnQud2hpY2ggaXMgZGVwcmVjYXRlZCwgYnV0IE1vdXNlRXZlbnQuYnV0dG9ucyBpcyBub3Qgc3VwcG9ydGVkIGluIFNhZmFyaVxuICAgIGlmICgoZS5idXR0b25zID09PSAxIHx8IGUud2hpY2ggPT09IDEpICYmIHRoaXMudG91Y2hpbmcpIHtcbiAgICAgIGNvbnN0IHJlY3QgPSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHRoaXMubW92ZVBvaW50ZXIoZS5jbGllbnRYIC0gcmVjdC5sZWZ0LCBlLmNsaWVudFkgLSByZWN0LnRvcCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQ2xpY2soZTogYW55KSB7XG4gICAgY29uc3QgcmVjdCA9IGUudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHRoaXMubW92ZVBvaW50ZXIoZS5jbGllbnRYIC0gcmVjdC5sZWZ0LCBlLmNsaWVudFkgLSByZWN0LnRvcCk7XG4gIH1cblxuICBtb3ZlUG9pbnRlcih4LCB5KSB7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldFBvaW50ZXJWYWx1ZSh4LCB5LCAyNTYpO1xuICAgIGlmICghdGhpcy5pc0F2YWlsYWJsZSh2YWx1ZSkpIHtcbiAgICAgIHRoaXMudW5hdmFpbGFibGVTZWxlY3Rpb24uZW1pdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWUgIT09IHRoaXMuZm9ybWF0dGVkVmFsdWUpIHtcbiAgICAgIHRoaXMuY2hhbmdlRXZlbnQuZW1pdCh7IHZhbHVlLCB0eXBlOiB0aGlzLnZpZXdUeXBlIH0pO1xuICAgICAgaWYgKHRoaXMudmlld1R5cGUgIT09ICdtaW51dGVzJykge1xuICAgICAgICBpZiAoIXRoaXMuaXNBdmFpbGFibGUodmFsdWUpKSB7XG4gICAgICAgICAgaWYgKHRoaXMubWluRGF0ZSAmJiB0aGlzLmlzQXZhaWxhYmxlKHZhbHVlKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VFdmVudC5lbWl0KHsgdmFsdWU6IHRoaXMubWluRGF0ZS5nZXRNaW51dGVzKCksIHR5cGU6ICdtaW51dGVzJyB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubWF4RGF0ZSAmJiB0aGlzLmlzQXZhaWxhYmxlKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5jaGFuZ2VFdmVudC5lbWl0KHsgdmFsdWU6IHRoaXMubWF4RGF0ZS5nZXRNaW51dGVzKCksIHR5cGU6ICdtaW51dGVzJyB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXROdW1iZXJzKGNvdW50LCB7IHNpemUsIHN0YXJ0ID0gMSwgc3RlcCA9IDEgfSwgaXNBbGxvd2VkRm4/OiAobnVtOiBudW1iZXIpID0+IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkoY291bnQpKS5tYXAoKF8sIGkpID0+ICh7XG4gICAgICBkaXNwbGF5OiBpICogc3RlcCArIHN0YXJ0LFxuICAgICAgdHJhbnNsYXRlWDogKHNpemUgLyAyIC0gMjApICogTWF0aC5jb3MoMiAqIE1hdGguUEkgKiAoaSAtIDIpIC8gY291bnQpLFxuICAgICAgdHJhbnNsYXRlWTogKHNpemUgLyAyIC0gMjApICogTWF0aC5zaW4oMiAqIE1hdGguUEkgKiAoaSAtIDIpIC8gY291bnQpLFxuICAgICAgYWxsb3dlZDogaXNBbGxvd2VkRm4gPyBpc0FsbG93ZWRGbihpKSA6IHRydWVcbiAgICB9KSk7XG4gIH1cblxuICBnZXRQb2ludGVyQW5nbGUodmFsdWUsIG1vZGU6IENsb2NrVmlld1R5cGUpIHtcbiAgICBpZiAodGhpcy52aWV3VHlwZSA9PT0gJ2hvdXJzJykge1xuICAgICAgcmV0dXJuIHRoaXMubW9kZSA9PT0gJzEyaCcgPyAzNjAgLyAxMiAqICh2YWx1ZSAtIDMpIDogMzYwIC8gMTIgKiAodmFsdWUgJSAxMiAtIDMpO1xuICAgIH1cbiAgICByZXR1cm4gMzYwIC8gNjAgKiAodmFsdWUgLSAxNSk7XG4gIH1cblxuICBnZXRQb2ludGVyVmFsdWUoeCwgeSwgc2l6ZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKHNpemUgLyAyIC0geCwgc2l6ZSAvIDIgLSB5KSAvIE1hdGguUEkgKiAxODA7XG4gICAgaWYgKGFuZ2xlIDwgMCkge1xuICAgICAgYW5nbGUgPSAzNjAgKyBhbmdsZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy52aWV3VHlwZSA9PT0gJ2hvdXJzJykge1xuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gJzEyaCcpIHtcbiAgICAgICAgdmFsdWUgPSAxMiAtIE1hdGgucm91bmQoYW5nbGUgKiAxMiAvIDM2MCk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IDEyIDogdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJhZGl1cyA9IE1hdGguc3FydChNYXRoLnBvdyhzaXplIC8gMiAtIHgsIDIpICsgTWF0aC5wb3coc2l6ZSAvIDIgLSB5LCAyKSk7XG4gICAgICB2YWx1ZSA9IDEyIC0gTWF0aC5yb3VuZChhbmdsZSAqIDEyIC8gMzYwKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gMCkgeyB2YWx1ZSA9IDEyOyB9XG4gICAgICBpZiAocmFkaXVzIDwgc2l6ZSAvIDIgLSAzMikgeyB2YWx1ZSA9IHZhbHVlID09PSAxMiA/IDAgOiB2YWx1ZSArIDEyOyB9XG4gICAgICByZXR1cm4gdmFsdWU7XG5cbiAgICB9XG5cbiAgICB2YWx1ZSA9IE1hdGgucm91bmQoNjAgLSA2MCAqIGFuZ2xlIC8gMzYwKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IDYwID8gMCA6IHZhbHVlO1xuICB9XG59XG4iXX0=