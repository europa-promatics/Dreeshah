import { MAT_DIALOG_DATA } from '@angular/material/dialog';
import { Component, EventEmitter, Output, Inject } from '@angular/core';
import { twoDigits, convertHoursForMode } from '../util';
export class MatTimepickerComponentDialogComponent {
    constructor(data) {
        this.data = data;
        this.twoDigits = twoDigits;
        this.changeEvent = new EventEmitter();
        this.okClickEvent = new EventEmitter();
        this.cancelClickEvent = new EventEmitter();
        this.allowed24HourMap = null;
        this.allowed12HourMap = null;
        this.invalidSelection = false;
        this.viewType = 'hours';
        this.isPm = false;
        this.skipMinuteAutoSwitch = false;
        this.autoSwitchID = null;
        this.invalidMedianID = null;
        this.hasInvalidMeridiem = false;
        this.editHoursClicked = false;
        this.isClosing = false;
        this.okClickHandler = () => {
            if (this.hasInvalidMeridiem) {
                this.isPm = !this.isPm;
                this.hasInvalidMeridiem = false;
            }
            this.okClickEvent.emit(this.value);
        };
        this.cancelClickHandler = () => {
            this.cancelClickEvent.emit();
        };
        this.isPm = data.isPm;
        this.bindData(data);
        // keep this always at the bottom
        this.value = data.value;
    }
    set value(value) {
        value = value || this.minDate || this.maxDate || new Date();
        this.hours = value.getHours();
        this.minutes = value.getMinutes();
        this._value = value;
    }
    get value() { return this._value; }
    set hours(value) {
        this._hours = value;
        this._formattedHour = convertHoursForMode(this.hours, this.mode).hour;
    }
    get hours() { return this._hours; }
    get formattedHours() { return this._formattedHour; }
    bindData(data) {
        this.mode = data.mode;
        this.okLabel = data.okLabel;
        this.cancelLabel = data.cancelLabel;
        this.okButtonTemplate = data.okButtonTemplate;
        this.cancelButtonTemplate = data.cancelButtonTemplate;
        this.anteMeridiemAbbreviation = data.anteMeridiemAbbreviation;
        this.postMeridiemAbbreviation = data.postMeridiemAbbreviation;
        this.color = data.color;
        this.minDate = data.minDate;
        this.maxDate = data.maxDate;
        this.allowed12HourMap = data.allowed12HourMap;
        this.allowed24HourMap = data.allowed24HourMap;
    }
    ngDoCheck() { this.bindData(this.data); }
    handleClockChange({ value, type }) {
        const is24hoursAutoMeridiemChange = this.mode === '24h' && type === 'hours' && ((this.hours >= 12 && value < 12) || (this.hours < 12 && value >= 12));
        if ((this.hasInvalidMeridiem && this.mode === '12h') || is24hoursAutoMeridiemChange) {
            this.isPm = !this.isPm;
            this.hasInvalidMeridiem = false;
        }
        if ((type && type === 'hours') || (!type && this.viewType === 'hours')) {
            this.hours = value;
        }
        else if ((type && type === 'minutes') || (!type && this.viewType === 'minutes')) {
            this.minutes = value;
        }
        const newValue = new Date();
        const hours = this.isPm ? this.hours < 12 ? this.hours + 12 : this.hours : this.hours === 12 ? 0 : this.hours;
        newValue.setHours(hours);
        newValue.setMinutes(this.minutes);
        newValue.setSeconds(0);
        newValue.setMilliseconds(0);
        this.value = newValue;
        this.changeEvent.emit(newValue);
    }
    clearInvalidMeridiem() {
        this.hasInvalidMeridiem = false;
    }
    handleUnavailableSelection() {
        clearTimeout(this.autoSwitchID);
    }
    handleClockChangeDone(e) {
        e.preventDefault(); // prevent mouseUp after touchEnd
        if (this.viewType === 'hours' && !this.skipMinuteAutoSwitch) {
            this.autoSwitchID = setTimeout(() => {
                this.editMinutes();
                this.autoSwitchID = null;
            }, 300);
        }
    }
    editHours() {
        this.viewType = 'hours';
        this.editHoursClicked = true;
        setTimeout(() => { this.editHoursClicked = false; }, 0);
    }
    editMinutes() {
        if (this.hasInvalidMeridiem) {
            this.isPm = !this.isPm;
            this.hasInvalidMeridiem = false;
        }
        this.viewType = 'minutes';
    }
    invalidSelectionHandler(value) {
        this.invalidSelection = value;
    }
    invalidMeridiem() {
        if (this.viewType !== 'minutes' && this.editHoursClicked) {
            if (this.invalidMedianID) {
                return;
            }
            this.invalidMedianID = setTimeout(() => {
                this.isPm = !this.isPm;
                this.hasInvalidMeridiem = false;
            }, 0);
            return;
        }
        this.hasInvalidMeridiem = true;
    }
    meridiemChange(hours) {
        const changeData = {
            type: this.viewType,
            value: this.viewType === 'hours' ? hours : this.value.getMinutes()
        };
        this.handleClockChange(changeData);
    }
    setAm() {
        if (this.hours >= 12) {
            this.hours = this.hours - 12;
        }
        this.isPm = false;
        this.meridiemChange(this.hours);
    }
    setPm() {
        if (this.hours < 12) {
            this.hours = this.hours + 12;
        }
        this.isPm = true;
        this.meridiemChange(this.hours);
    }
}
MatTimepickerComponentDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'mat-timepicker-dialog',
                template: "<ng-template #defaultCancelButtonTemplate>\n  <button mat-button [color]=\"color\" (click)=\"cancelClickHandler()\">{{cancelLabel}}</button>\n</ng-template>\n<ng-template #defaultOkButtonTemplate>\n  <button mat-button [disabled]=\"invalidSelection\" [color]=\"color\" (click)=\"okClickHandler()\">{{okLabel}}</button>\n</ng-template>\n\n<mat-dialog-content>\n  <div class=\"root\">\n    <mat-toolbar [color]=\"color\" class=\"header\">\n      <div class=\"placeholder\"></div>\n      <div class=\"time-frame\">\n        <span class=\"time fixed-font-size\" [ngClass]=\"{'select': this.viewType === 'hours' && 'active' }\"\n          (click)=\"editHours()\">\n          {{ twoDigits(formattedHours) }}\n        </span>\n        <span class=\"fixed-font-size\">:</span>\n        <span class=\"time fixed-font-size\" [ngClass]=\"{ 'select': this.viewType === 'minutes' && 'active' }\"\n          (click)=\"editMinutes()\">\n          {{ twoDigits(minutes) }}\n        </span>\n      </div>\n      <ng-container *ngIf=\"mode === '12h' then ampm else normal\"></ng-container>\n      <ng-template #normal>\n        <div class=\"placeholder\"></div>\n      </ng-template>\n      <ng-template #ampm>\n        <div class=\"ampm\">\n          <span class=\"time\" [ngClass]=\"{ 'select': isPm }\"\n            (click)=\"setPm()\">{{postMeridiemAbbreviation | uppercase }}</span>\n          <span class=\"time\" [ngClass]=\"{ 'select': !isPm }\"\n            (click)=\"setAm()\">{{anteMeridiemAbbreviation | uppercase }}</span>\n        </div>\n      </ng-template>\n    </mat-toolbar>\n    <div class=\"body\">\n      <mat-clock [allowed12HourMap]=\"allowed12HourMap\" [allowed24HourMap]=\"allowed24HourMap\" [minDate]=\"minDate\"\n        [maxDate]=\"maxDate\" [color]=\"color\" [viewType]=\"viewType\" [mode]=\"mode\" [formattedHours]=\"formattedHours\"\n        [minutes]=\"minutes\" (changeEvent)=\"handleClockChange($event)\"\n        (unavailableSelection)=\"handleUnavailableSelection()\"\n        [formattedValue]=\"viewType === 'minutes' ? minutes : formattedHours\" [isPm]=\"isPm\"\n        (invalidMeridiem)=\"invalidMeridiem()\" (mouseup)=\"handleClockChangeDone($event)\"\n        (clearInvalidMeridiem)=\"clearInvalidMeridiem()\" (touchend)=\"handleClockChangeDone($event)\"\n        (invalidSelection)=\"invalidSelectionHandler($event)\"></mat-clock>\n    </div>\n  </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <ng-container\n    *ngTemplateOutlet=\"cancelButtonTemplate || defaultCancelButtonTemplate; context: { label: cancelLabel, $implicit: cancelClickHandler }\">\n  </ng-container>\n  <ng-container\n    *ngTemplateOutlet=\"okButtonTemplate || defaultOkButtonTemplate; context: { label: okLabel, $implicit: okClickHandler }\">\n  </ng-container>\n</mat-dialog-actions>",
                styles: ["mat-dialog-content{margin-top:-24px;min-height:395px;overflow:hidden;padding:0}mat-dialog-actions{justify-content:flex-end;margin-left:-8px;margin-right:-8px}.root{min-width:282px}.header{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;align-items:center;border-top-left-radius:2px;border-top-right-radius:2px;display:flex;height:98px;justify-content:center;line-height:58px;padding:20px 0;user-select:none}.header,.header .fixed-font-size{font-size:58px}.header .time-frame{height:60px}.time{cursor:pointer;transition:all .2s ease-out}.time:not(.select){opacity:.6}.placeholder{flex:1}.ampm{display:flex;flex:1;flex-direction:column-reverse;font-size:14px;font-weight:700px;line-height:20px;margin-left:16px}.select{color:#fff}.body{display:flex;justify-content:center;padding:24px 16px 20px}"]
            },] }
];
MatTimepickerComponentDialogComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
MatTimepickerComponentDialogComponent.propDecorators = {
    changeEvent: [{ type: Output }],
    okClickEvent: [{ type: Output }],
    cancelClickEvent: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci1kaWFsb2cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbWF0LXRpbWVwaWNrZXIvc3JjL2xpYi90aW1lcGlja2VyLWRpYWxvZy90aW1lcGlja2VyLWRpYWxvZy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQXdCLE1BQU0sZUFBZSxDQUFDO0FBRTlGLE9BQU8sRUFBRSxTQUFTLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFRekQsTUFBTSxPQUFPLHFDQUFxQztJQTZFaEQsWUFBNEMsSUFBSTtRQUFKLFNBQUksR0FBSixJQUFJLENBQUE7UUEzRWhELGNBQVMsR0FBRyxTQUFTLENBQUM7UUFFWixnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ3pELGlCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFRLENBQUM7UUFDM0QscUJBQWdCLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFFeEUscUJBQWdCLEdBQXNCLElBQUksQ0FBQztRQUMzQyxxQkFBZ0IsR0FBc0IsSUFBSSxDQUFDO1FBRTNDLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQXFCekIsYUFBUSxHQUFrQixPQUFPLENBQUM7UUFJbEMsU0FBSSxHQUFHLEtBQUssQ0FBQztRQUNiLHlCQUFvQixHQUFHLEtBQUssQ0FBQztRQUM3QixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixvQkFBZSxHQUFHLElBQUksQ0FBQztRQUN2Qix1QkFBa0IsR0FBRyxLQUFLLENBQUM7UUFDM0IscUJBQWdCLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFnSmxCLG1CQUFjLEdBQUcsR0FBRyxFQUFFO1lBQ3BCLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO2dCQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQkFDdkIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQzthQUNqQztZQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUE7UUFFRCx1QkFBa0IsR0FBRyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDO1FBQy9CLENBQUMsQ0FBQTtRQXRIQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQixpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzFCLENBQUM7SUE1REQsSUFBSSxLQUFLLENBQUMsS0FBVTtRQUNsQixLQUFLLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzlCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLEtBQUssS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBeUJuQyxJQUFJLEtBQUssQ0FBQyxLQUFVO1FBQ2xCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxjQUFjLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3hFLENBQUM7SUFDRCxJQUFJLEtBQUssS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRW5DLElBQUksY0FBYyxLQUFLLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFFcEQsUUFBUSxDQUFDLElBQVM7UUFDaEIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDcEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztRQUM5QyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDO1FBQ3RELElBQUksQ0FBQyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUM7UUFDOUQsSUFBSSxDQUFDLHdCQUF3QixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQztRQUM5RCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQzVCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUM1QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1FBQzlDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDaEQsQ0FBQztJQVNELFNBQVMsS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFekMsaUJBQWlCLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFnRDtRQUM3RSxNQUFNLDJCQUEyQixHQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxPQUFPLElBQUksQ0FDN0UsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksMkJBQTJCLEVBQUU7WUFDbkYsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDdkIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztTQUNqQztRQUVELElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxPQUFPLENBQUMsRUFBRTtZQUN0RSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNwQjthQUFNLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsRUFBRTtZQUNqRixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUN0QjtRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQzlHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxvQkFBb0I7UUFDbEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztJQUNsQyxDQUFDO0lBRUQsMEJBQTBCO1FBQ3hCLFlBQVksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELHFCQUFxQixDQUFDLENBQUM7UUFDckIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsaUNBQWlDO1FBRXJELElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDM0QsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO2dCQUNsQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ25CLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQzNCLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNUO0lBQ0gsQ0FBQztJQUVELFNBQVM7UUFDUCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDdkIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztTQUNqQztRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO0lBQzVCLENBQUM7SUFFRCx1QkFBdUIsQ0FBQyxLQUFLO1FBQzNCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7SUFDaEMsQ0FBQztJQUdELGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN4RCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQUUsT0FBTzthQUFFO1lBQ3JDLElBQUksQ0FBQyxlQUFlLEdBQUcsVUFBVSxDQUFDLEdBQUcsRUFBRTtnQkFDckMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7WUFDbEMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ04sT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBRUQsY0FBYyxDQUFDLEtBQUs7UUFDbEIsTUFBTSxVQUFVLEdBQUc7WUFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ25CLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRTtTQUNuRSxDQUFDO1FBQ0YsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFHRCxLQUFLO1FBQ0gsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRTtZQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1NBQzlCO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFFbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxFQUFFO1lBQ25CLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDOUI7UUFDRCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7WUE3TEYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLGt2RkFBaUQ7O2FBRWxEOzs7NENBOEVjLE1BQU0sU0FBQyxlQUFlOzs7MEJBekVsQyxNQUFNOzJCQUNOLE1BQU07K0JBQ04sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1BVF9ESUFMT0dfREFUQSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2RpYWxvZyc7XG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBJbmplY3QsIERvQ2hlY2ssIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDbG9ja1ZpZXdUeXBlLCBDbG9ja01vZGUsIElBbGxvd2VkMjRIb3VyTWFwLCBJQWxsb3dlZDEySG91ck1hcCB9IGZyb20gJy4uL2ludGVyZmFjZXMtYW5kLXR5cGVzJztcbmltcG9ydCB7IHR3b0RpZ2l0cywgY29udmVydEhvdXJzRm9yTW9kZSB9IGZyb20gJy4uL3V0aWwnO1xuaW1wb3J0IHsgTWF0VGltZXBpY2tlckJ1dHRvblRlbXBsYXRlQ29udGV4dCB9IGZyb20gJy4uL3RpbWVwaWNrZXIuZGlyZWN0aXZlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWF0LXRpbWVwaWNrZXItZGlhbG9nJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RpbWVwaWNrZXItZGlhbG9nLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGltZXBpY2tlci1kaWFsb2cuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBNYXRUaW1lcGlja2VyQ29tcG9uZW50RGlhbG9nQ29tcG9uZW50IGltcGxlbWVudHMgRG9DaGVjayB7XG5cbiAgdHdvRGlnaXRzID0gdHdvRGlnaXRzO1xuXG4gIEBPdXRwdXQoKSBjaGFuZ2VFdmVudDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIG9rQ2xpY2tFdmVudDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPERhdGU+KCk7XG4gIEBPdXRwdXQoKSBjYW5jZWxDbGlja0V2ZW50OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGFsbG93ZWQyNEhvdXJNYXA6IElBbGxvd2VkMjRIb3VyTWFwID0gbnVsbDtcbiAgYWxsb3dlZDEySG91ck1hcDogSUFsbG93ZWQxMkhvdXJNYXAgPSBudWxsO1xuXG4gIGludmFsaWRTZWxlY3Rpb24gPSBmYWxzZTtcblxuICBva0xhYmVsOiBzdHJpbmc7XG4gIGNhbmNlbExhYmVsOiBzdHJpbmc7XG5cbiAgb2tCdXR0b25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8TWF0VGltZXBpY2tlckJ1dHRvblRlbXBsYXRlQ29udGV4dD47XG4gIGNhbmNlbEJ1dHRvblRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxNYXRUaW1lcGlja2VyQnV0dG9uVGVtcGxhdGVDb250ZXh0PjtcblxuICBhbnRlTWVyaWRpZW1BYmJyZXZpYXRpb246IHN0cmluZztcbiAgcG9zdE1lcmlkaWVtQWJicmV2aWF0aW9uOiBzdHJpbmc7XG5cbiAgc2V0IHZhbHVlKHZhbHVlOiBhbnkpIHtcbiAgICB2YWx1ZSA9IHZhbHVlIHx8IHRoaXMubWluRGF0ZSB8fCB0aGlzLm1heERhdGUgfHwgbmV3IERhdGUoKTtcbiAgICB0aGlzLmhvdXJzID0gdmFsdWUuZ2V0SG91cnMoKTtcbiAgICB0aGlzLm1pbnV0ZXMgPSB2YWx1ZS5nZXRNaW51dGVzKCk7XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIHsgcmV0dXJuIHRoaXMuX3ZhbHVlOyB9XG5cbiAgbW9kZTogQ2xvY2tNb2RlO1xuICB2aWV3VHlwZTogQ2xvY2tWaWV3VHlwZSA9ICdob3Vycyc7XG5cbiAgbWludXRlczogYW55O1xuICBjb2xvcjogc3RyaW5nO1xuICBpc1BtID0gZmFsc2U7XG4gIHNraXBNaW51dGVBdXRvU3dpdGNoID0gZmFsc2U7XG4gIGF1dG9Td2l0Y2hJRCA9IG51bGw7XG4gIGludmFsaWRNZWRpYW5JRCA9IG51bGw7XG4gIGhhc0ludmFsaWRNZXJpZGllbSA9IGZhbHNlO1xuICBlZGl0SG91cnNDbGlja2VkID0gZmFsc2U7XG4gIGlzQ2xvc2luZyA9IGZhbHNlO1xuXG4gIG1pbkRhdGU6IERhdGU7XG4gIG1heERhdGU6IERhdGU7XG5cbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbiAgX2Zvcm1hdHRlZEhvdXI6IGFueTtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbiAgX2hvdXJzOiBhbnk7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lXG4gIF92YWx1ZTogRGF0ZTtcblxuICBzZXQgaG91cnModmFsdWU6IGFueSkge1xuICAgIHRoaXMuX2hvdXJzID0gdmFsdWU7XG4gICAgdGhpcy5fZm9ybWF0dGVkSG91ciA9IGNvbnZlcnRIb3Vyc0Zvck1vZGUodGhpcy5ob3VycywgdGhpcy5tb2RlKS5ob3VyO1xuICB9XG4gIGdldCBob3VycygpIHsgcmV0dXJuIHRoaXMuX2hvdXJzOyB9XG5cbiAgZ2V0IGZvcm1hdHRlZEhvdXJzKCkgeyByZXR1cm4gdGhpcy5fZm9ybWF0dGVkSG91cjsgfVxuXG4gIGJpbmREYXRhKGRhdGE6IGFueSkge1xuICAgIHRoaXMubW9kZSA9IGRhdGEubW9kZTtcbiAgICB0aGlzLm9rTGFiZWwgPSBkYXRhLm9rTGFiZWw7XG4gICAgdGhpcy5jYW5jZWxMYWJlbCA9IGRhdGEuY2FuY2VsTGFiZWw7XG4gICAgdGhpcy5va0J1dHRvblRlbXBsYXRlID0gZGF0YS5va0J1dHRvblRlbXBsYXRlO1xuICAgIHRoaXMuY2FuY2VsQnV0dG9uVGVtcGxhdGUgPSBkYXRhLmNhbmNlbEJ1dHRvblRlbXBsYXRlO1xuICAgIHRoaXMuYW50ZU1lcmlkaWVtQWJicmV2aWF0aW9uID0gZGF0YS5hbnRlTWVyaWRpZW1BYmJyZXZpYXRpb247XG4gICAgdGhpcy5wb3N0TWVyaWRpZW1BYmJyZXZpYXRpb24gPSBkYXRhLnBvc3RNZXJpZGllbUFiYnJldmlhdGlvbjtcbiAgICB0aGlzLmNvbG9yID0gZGF0YS5jb2xvcjtcbiAgICB0aGlzLm1pbkRhdGUgPSBkYXRhLm1pbkRhdGU7XG4gICAgdGhpcy5tYXhEYXRlID0gZGF0YS5tYXhEYXRlO1xuICAgIHRoaXMuYWxsb3dlZDEySG91ck1hcCA9IGRhdGEuYWxsb3dlZDEySG91ck1hcDtcbiAgICB0aGlzLmFsbG93ZWQyNEhvdXJNYXAgPSBkYXRhLmFsbG93ZWQyNEhvdXJNYXA7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KE1BVF9ESUFMT0dfREFUQSkgcHVibGljIGRhdGEpIHtcbiAgICB0aGlzLmlzUG0gPSBkYXRhLmlzUG07XG4gICAgdGhpcy5iaW5kRGF0YShkYXRhKTtcbiAgICAvLyBrZWVwIHRoaXMgYWx3YXlzIGF0IHRoZSBib3R0b21cbiAgICB0aGlzLnZhbHVlID0gZGF0YS52YWx1ZTtcbiAgfVxuXG4gIG5nRG9DaGVjaygpIHsgdGhpcy5iaW5kRGF0YSh0aGlzLmRhdGEpOyB9XG5cbiAgaGFuZGxlQ2xvY2tDaGFuZ2UoeyB2YWx1ZSwgdHlwZSB9OiB7IHZhbHVlOiBudW1iZXIsIHR5cGU6ICdtaW51dGVzJyB8ICdob3VycycgfSkge1xuICAgIGNvbnN0IGlzMjRob3Vyc0F1dG9NZXJpZGllbUNoYW5nZSA9IHRoaXMubW9kZSA9PT0gJzI0aCcgJiYgdHlwZSA9PT0gJ2hvdXJzJyAmJiAoXG4gICAgICAodGhpcy5ob3VycyA+PSAxMiAmJiB2YWx1ZSA8IDEyKSB8fCAodGhpcy5ob3VycyA8IDEyICYmIHZhbHVlID49IDEyKSk7XG4gICAgaWYgKCh0aGlzLmhhc0ludmFsaWRNZXJpZGllbSAmJiB0aGlzLm1vZGUgPT09ICcxMmgnKSB8fCBpczI0aG91cnNBdXRvTWVyaWRpZW1DaGFuZ2UpIHtcbiAgICAgIHRoaXMuaXNQbSA9ICF0aGlzLmlzUG07XG4gICAgICB0aGlzLmhhc0ludmFsaWRNZXJpZGllbSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICgodHlwZSAmJiB0eXBlID09PSAnaG91cnMnKSB8fCAoIXR5cGUgJiYgdGhpcy52aWV3VHlwZSA9PT0gJ2hvdXJzJykpIHtcbiAgICAgIHRoaXMuaG91cnMgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKCh0eXBlICYmIHR5cGUgPT09ICdtaW51dGVzJykgfHwgKCF0eXBlICYmIHRoaXMudmlld1R5cGUgPT09ICdtaW51dGVzJykpIHtcbiAgICAgIHRoaXMubWludXRlcyA9IHZhbHVlO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1ZhbHVlID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBob3VycyA9IHRoaXMuaXNQbSA/IHRoaXMuaG91cnMgPCAxMiA/IHRoaXMuaG91cnMgKyAxMiA6IHRoaXMuaG91cnMgOiB0aGlzLmhvdXJzID09PSAxMiA/IDAgOiB0aGlzLmhvdXJzO1xuICAgIG5ld1ZhbHVlLnNldEhvdXJzKGhvdXJzKTtcbiAgICBuZXdWYWx1ZS5zZXRNaW51dGVzKHRoaXMubWludXRlcyk7XG4gICAgbmV3VmFsdWUuc2V0U2Vjb25kcygwKTtcbiAgICBuZXdWYWx1ZS5zZXRNaWxsaXNlY29uZHMoMCk7XG4gICAgdGhpcy52YWx1ZSA9IG5ld1ZhbHVlO1xuICAgIHRoaXMuY2hhbmdlRXZlbnQuZW1pdChuZXdWYWx1ZSk7XG4gIH1cblxuICBjbGVhckludmFsaWRNZXJpZGllbSgpIHtcbiAgICB0aGlzLmhhc0ludmFsaWRNZXJpZGllbSA9IGZhbHNlO1xuICB9XG5cbiAgaGFuZGxlVW5hdmFpbGFibGVTZWxlY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuYXV0b1N3aXRjaElEKTtcbiAgfVxuXG4gIGhhbmRsZUNsb2NrQ2hhbmdlRG9uZShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IG1vdXNlVXAgYWZ0ZXIgdG91Y2hFbmRcblxuICAgIGlmICh0aGlzLnZpZXdUeXBlID09PSAnaG91cnMnICYmICF0aGlzLnNraXBNaW51dGVBdXRvU3dpdGNoKSB7XG4gICAgICB0aGlzLmF1dG9Td2l0Y2hJRCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmVkaXRNaW51dGVzKCk7XG4gICAgICAgIHRoaXMuYXV0b1N3aXRjaElEID0gbnVsbDtcbiAgICAgIH0sIDMwMCk7XG4gICAgfVxuICB9XG5cbiAgZWRpdEhvdXJzKCkge1xuICAgIHRoaXMudmlld1R5cGUgPSAnaG91cnMnO1xuICAgIHRoaXMuZWRpdEhvdXJzQ2xpY2tlZCA9IHRydWU7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuZWRpdEhvdXJzQ2xpY2tlZCA9IGZhbHNlOyB9LCAwKTtcbiAgfVxuXG4gIGVkaXRNaW51dGVzKCkge1xuICAgIGlmICh0aGlzLmhhc0ludmFsaWRNZXJpZGllbSkge1xuICAgICAgdGhpcy5pc1BtID0gIXRoaXMuaXNQbTtcbiAgICAgIHRoaXMuaGFzSW52YWxpZE1lcmlkaWVtID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMudmlld1R5cGUgPSAnbWludXRlcyc7XG4gIH1cblxuICBpbnZhbGlkU2VsZWN0aW9uSGFuZGxlcih2YWx1ZSkge1xuICAgIHRoaXMuaW52YWxpZFNlbGVjdGlvbiA9IHZhbHVlO1xuICB9XG5cblxuICBpbnZhbGlkTWVyaWRpZW0oKSB7XG4gICAgaWYgKHRoaXMudmlld1R5cGUgIT09ICdtaW51dGVzJyAmJiB0aGlzLmVkaXRIb3Vyc0NsaWNrZWQpIHtcbiAgICAgIGlmICh0aGlzLmludmFsaWRNZWRpYW5JRCkgeyByZXR1cm47IH1cbiAgICAgIHRoaXMuaW52YWxpZE1lZGlhbklEID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuaXNQbSA9ICF0aGlzLmlzUG07XG4gICAgICAgIHRoaXMuaGFzSW52YWxpZE1lcmlkaWVtID0gZmFsc2U7XG4gICAgICB9LCAwKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5oYXNJbnZhbGlkTWVyaWRpZW0gPSB0cnVlO1xuICB9XG5cbiAgbWVyaWRpZW1DaGFuZ2UoaG91cnMpIHtcbiAgICBjb25zdCBjaGFuZ2VEYXRhID0ge1xuICAgICAgdHlwZTogdGhpcy52aWV3VHlwZSxcbiAgICAgIHZhbHVlOiB0aGlzLnZpZXdUeXBlID09PSAnaG91cnMnID8gaG91cnMgOiB0aGlzLnZhbHVlLmdldE1pbnV0ZXMoKVxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDbG9ja0NoYW5nZShjaGFuZ2VEYXRhKTtcbiAgfVxuXG5cbiAgc2V0QW0oKSB7XG4gICAgaWYgKHRoaXMuaG91cnMgPj0gMTIpIHtcbiAgICAgIHRoaXMuaG91cnMgPSB0aGlzLmhvdXJzIC0gMTI7XG4gICAgfVxuICAgIHRoaXMuaXNQbSA9IGZhbHNlO1xuXG4gICAgdGhpcy5tZXJpZGllbUNoYW5nZSh0aGlzLmhvdXJzKTtcbiAgfVxuXG4gIHNldFBtKCkge1xuICAgIGlmICh0aGlzLmhvdXJzIDwgMTIpIHtcbiAgICAgIHRoaXMuaG91cnMgPSB0aGlzLmhvdXJzICsgMTI7XG4gICAgfVxuICAgIHRoaXMuaXNQbSA9IHRydWU7XG4gICAgdGhpcy5tZXJpZGllbUNoYW5nZSh0aGlzLmhvdXJzKTtcbiAgfVxuXG4gIG9rQ2xpY2tIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmhhc0ludmFsaWRNZXJpZGllbSkge1xuICAgICAgdGhpcy5pc1BtID0gIXRoaXMuaXNQbTtcbiAgICAgIHRoaXMuaGFzSW52YWxpZE1lcmlkaWVtID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMub2tDbGlja0V2ZW50LmVtaXQodGhpcy52YWx1ZSk7XG4gIH1cblxuICBjYW5jZWxDbGlja0hhbmRsZXIgPSAoKSA9PiB7XG4gICAgdGhpcy5jYW5jZWxDbGlja0V2ZW50LmVtaXQoKTtcbiAgfVxuXG59XG4iXX0=