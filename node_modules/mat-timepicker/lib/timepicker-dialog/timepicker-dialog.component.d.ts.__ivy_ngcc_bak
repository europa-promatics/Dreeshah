import { EventEmitter, DoCheck, TemplateRef } from '@angular/core';
import { ClockViewType, ClockMode, IAllowed24HourMap, IAllowed12HourMap } from '../interfaces-and-types';
import { twoDigits } from '../util';
import { MatTimepickerButtonTemplateContext } from '../timepicker.directive';
export declare class MatTimepickerComponentDialogComponent implements DoCheck {
    data: any;
    twoDigits: typeof twoDigits;
    changeEvent: EventEmitter<any>;
    okClickEvent: EventEmitter<any>;
    cancelClickEvent: EventEmitter<any>;
    allowed24HourMap: IAllowed24HourMap;
    allowed12HourMap: IAllowed12HourMap;
    invalidSelection: boolean;
    okLabel: string;
    cancelLabel: string;
    okButtonTemplate: TemplateRef<MatTimepickerButtonTemplateContext>;
    cancelButtonTemplate: TemplateRef<MatTimepickerButtonTemplateContext>;
    anteMeridiemAbbreviation: string;
    postMeridiemAbbreviation: string;
    set value(value: any);
    get value(): any;
    mode: ClockMode;
    viewType: ClockViewType;
    minutes: any;
    color: string;
    isPm: boolean;
    skipMinuteAutoSwitch: boolean;
    autoSwitchID: any;
    invalidMedianID: any;
    hasInvalidMeridiem: boolean;
    editHoursClicked: boolean;
    isClosing: boolean;
    minDate: Date;
    maxDate: Date;
    _formattedHour: any;
    _hours: any;
    _value: Date;
    set hours(value: any);
    get hours(): any;
    get formattedHours(): any;
    bindData(data: any): void;
    constructor(data: any);
    ngDoCheck(): void;
    handleClockChange({ value, type }: {
        value: number;
        type: 'minutes' | 'hours';
    }): void;
    clearInvalidMeridiem(): void;
    handleUnavailableSelection(): void;
    handleClockChangeDone(e: any): void;
    editHours(): void;
    editMinutes(): void;
    invalidSelectionHandler(value: any): void;
    invalidMeridiem(): void;
    meridiemChange(hours: any): void;
    setAm(): void;
    setPm(): void;
    okClickHandler: () => void;
    cancelClickHandler: () => void;
}
