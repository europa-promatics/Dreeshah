import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ClockViewType, ClockNumber, ClockMode } from '../interfaces-and-types';
import { getIsAvailabeFn } from '../util';
import * as ɵngcc0 from '@angular/core';
export declare class ClockComponent implements OnChanges {
    mode: ClockMode;
    viewType: ClockViewType;
    color: string;
    formattedValue: number;
    minDate: Date;
    maxDate: Date;
    isPm: boolean;
    formattedHours: number;
    minutes: number;
    changeEvent: EventEmitter<any>;
    unavailableSelection: EventEmitter<any>;
    invalidMeridiem: EventEmitter<any>;
    invalidSelection: EventEmitter<any>;
    clearInvalidMeridiem: EventEmitter<any>;
    allowed12HourMap: any;
    allowed24HourMap: any;
    isFormattedValueAllowed: boolean;
    isAvailableFn: ReturnType<typeof getIsAvailabeFn>;
    meridiem: any;
    touching: boolean;
    angle: number;
    numbers: ClockNumber[];
    secondaryNumbers: ClockNumber[];
    minuteDots: ClockNumber[];
    invalidMeridiemEmitted: boolean;
    initIsAllowedFn(): void;
    isAvailable(value: any): any;
    ngOnChanges(simpleChanges: SimpleChanges): void;
    calculateAngule(): void;
    setNumbers(): void;
    disableAnimatedPointer(): void;
    enableAnimatedPointer(): void;
    handleTouchMove: (e: any) => void;
    handleTouchEnd(e: any): void;
    handleMouseMove(e: any): void;
    handleClick(e: any): void;
    movePointer(x: any, y: any): void;
    getNumbers(count: any, { size, start, step }: {
        size: any;
        start?: number;
        step?: number;
    }, isAllowedFn?: (num: number) => boolean): any;
    getPointerAngle(value: any, mode: ClockViewType): number;
    getPointerValue(x: any, y: any, size: any): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClockComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClockComponent, "mat-clock", never, {
    "color": "color";
    "allowed12HourMap": "allowed12HourMap";
    "allowed24HourMap": "allowed24HourMap";
    "mode": "mode";
    "viewType": "viewType";
    "formattedValue": "formattedValue";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "isPm": "isPm";
    "formattedHours": "formattedHours";
    "minutes": "minutes";
}, {
    "changeEvent": "changeEvent";
    "unavailableSelection": "unavailableSelection";
    "invalidMeridiem": "invalidMeridiem";
    "invalidSelection": "invalidSelection";
    "clearInvalidMeridiem": "clearInvalidMeridiem";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvY2suY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNsb2NrLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsb2NrVmlld1R5cGUsIENsb2NrTnVtYmVyLCBDbG9ja01vZGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzLWFuZC10eXBlcyc7XG5pbXBvcnQgeyBnZXRJc0F2YWlsYWJlRm4gfSBmcm9tICcuLi91dGlsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsb2NrQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBtb2RlOiBDbG9ja01vZGU7XG4gICAgdmlld1R5cGU6IENsb2NrVmlld1R5cGU7XG4gICAgY29sb3I6IHN0cmluZztcbiAgICBmb3JtYXR0ZWRWYWx1ZTogbnVtYmVyO1xuICAgIG1pbkRhdGU6IERhdGU7XG4gICAgbWF4RGF0ZTogRGF0ZTtcbiAgICBpc1BtOiBib29sZWFuO1xuICAgIGZvcm1hdHRlZEhvdXJzOiBudW1iZXI7XG4gICAgbWludXRlczogbnVtYmVyO1xuICAgIGNoYW5nZUV2ZW50OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB1bmF2YWlsYWJsZVNlbGVjdGlvbjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgaW52YWxpZE1lcmlkaWVtOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBpbnZhbGlkU2VsZWN0aW9uOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjbGVhckludmFsaWRNZXJpZGllbTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgYWxsb3dlZDEySG91ck1hcDogYW55O1xuICAgIGFsbG93ZWQyNEhvdXJNYXA6IGFueTtcbiAgICBpc0Zvcm1hdHRlZFZhbHVlQWxsb3dlZDogYm9vbGVhbjtcbiAgICBpc0F2YWlsYWJsZUZuOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRJc0F2YWlsYWJlRm4+O1xuICAgIG1lcmlkaWVtOiBhbnk7XG4gICAgdG91Y2hpbmc6IGJvb2xlYW47XG4gICAgYW5nbGU6IG51bWJlcjtcbiAgICBudW1iZXJzOiBDbG9ja051bWJlcltdO1xuICAgIHNlY29uZGFyeU51bWJlcnM6IENsb2NrTnVtYmVyW107XG4gICAgbWludXRlRG90czogQ2xvY2tOdW1iZXJbXTtcbiAgICBpbnZhbGlkTWVyaWRpZW1FbWl0dGVkOiBib29sZWFuO1xuICAgIGluaXRJc0FsbG93ZWRGbigpOiB2b2lkO1xuICAgIGlzQXZhaWxhYmxlKHZhbHVlOiBhbnkpOiBhbnk7XG4gICAgbmdPbkNoYW5nZXMoc2ltcGxlQ2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgY2FsY3VsYXRlQW5ndWxlKCk6IHZvaWQ7XG4gICAgc2V0TnVtYmVycygpOiB2b2lkO1xuICAgIGRpc2FibGVBbmltYXRlZFBvaW50ZXIoKTogdm9pZDtcbiAgICBlbmFibGVBbmltYXRlZFBvaW50ZXIoKTogdm9pZDtcbiAgICBoYW5kbGVUb3VjaE1vdmU6IChlOiBhbnkpID0+IHZvaWQ7XG4gICAgaGFuZGxlVG91Y2hFbmQoZTogYW55KTogdm9pZDtcbiAgICBoYW5kbGVNb3VzZU1vdmUoZTogYW55KTogdm9pZDtcbiAgICBoYW5kbGVDbGljayhlOiBhbnkpOiB2b2lkO1xuICAgIG1vdmVQb2ludGVyKHg6IGFueSwgeTogYW55KTogdm9pZDtcbiAgICBnZXROdW1iZXJzKGNvdW50OiBhbnksIHsgc2l6ZSwgc3RhcnQsIHN0ZXAgfToge1xuICAgICAgICBzaXplOiBhbnk7XG4gICAgICAgIHN0YXJ0PzogbnVtYmVyO1xuICAgICAgICBzdGVwPzogbnVtYmVyO1xuICAgIH0sIGlzQWxsb3dlZEZuPzogKG51bTogbnVtYmVyKSA9PiBib29sZWFuKTogYW55O1xuICAgIGdldFBvaW50ZXJBbmdsZSh2YWx1ZTogYW55LCBtb2RlOiBDbG9ja1ZpZXdUeXBlKTogbnVtYmVyO1xuICAgIGdldFBvaW50ZXJWYWx1ZSh4OiBhbnksIHk6IGFueSwgc2l6ZTogYW55KTogYW55O1xufVxuIl19