import { OnInit, EventEmitter, OnDestroy } from '@angular/core';
import { DomSanitizer, SafeHtml, SafeStyle } from '@angular/platform-browser';
import * as ɵngcc0 from '@angular/core';
export declare class GalleryImageComponent implements OnInit, OnDestroy {
    private _sanitizer;
    /** Stream that emits the state */
    private readonly _state;
    readonly state: import("rxjs").Observable<"failed" | "loading" | "success">;
    /** Progress value */
    progress: number;
    /** Is thumbnail */
    isThumbnail: boolean;
    /** Image source URL */
    src: string;
    /** Loaded image URL */
    imageUrl: SafeStyle;
    /** Custom loader template */
    loadingIcon: string;
    /** Custom loader safe template */
    loaderTemplate: SafeHtml;
    /** Custom error template */
    loadingError: string;
    /** Custom error safe template */
    errorTemplate: SafeHtml;
    /** Stream that emits when an error occurs */
    error: EventEmitter<Error>;
    /** loading error */
    loadError: Error;
    readonly imageLoadSuccess: boolean;
    readonly imageLoadFailed: boolean;
    constructor(_sanitizer: DomSanitizer);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onProgress({ loaded, total }: {
        loaded: number;
        total: number;
    }): void;
    onLoaded(blobUrl: string): void;
    onError(err: Error): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GalleryImageComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GalleryImageComponent, "gallery-image", never, {
    "isThumbnail": "isThumbnail";
    "src": "src";
    "loadingIcon": "loadingIcon";
    "loadingError": "loadingError";
}, {
    "error": "error";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZ2FsbGVyeS1pbWFnZS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9DQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZUh0bWwsIFNhZmVTdHlsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR2FsbGVyeUltYWdlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgX3Nhbml0aXplcjtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgdGhlIHN0YXRlICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBfc3RhdGU7XG4gICAgcmVhZG9ubHkgc3RhdGU6IGltcG9ydChcInJ4anNcIikuT2JzZXJ2YWJsZTxcImZhaWxlZFwiIHwgXCJsb2FkaW5nXCIgfCBcInN1Y2Nlc3NcIj47XG4gICAgLyoqIFByb2dyZXNzIHZhbHVlICovXG4gICAgcHJvZ3Jlc3M6IG51bWJlcjtcbiAgICAvKiogSXMgdGh1bWJuYWlsICovXG4gICAgaXNUaHVtYm5haWw6IGJvb2xlYW47XG4gICAgLyoqIEltYWdlIHNvdXJjZSBVUkwgKi9cbiAgICBzcmM6IHN0cmluZztcbiAgICAvKiogTG9hZGVkIGltYWdlIFVSTCAqL1xuICAgIGltYWdlVXJsOiBTYWZlU3R5bGU7XG4gICAgLyoqIEN1c3RvbSBsb2FkZXIgdGVtcGxhdGUgKi9cbiAgICBsb2FkaW5nSWNvbjogc3RyaW5nO1xuICAgIC8qKiBDdXN0b20gbG9hZGVyIHNhZmUgdGVtcGxhdGUgKi9cbiAgICBsb2FkZXJUZW1wbGF0ZTogU2FmZUh0bWw7XG4gICAgLyoqIEN1c3RvbSBlcnJvciB0ZW1wbGF0ZSAqL1xuICAgIGxvYWRpbmdFcnJvcjogc3RyaW5nO1xuICAgIC8qKiBDdXN0b20gZXJyb3Igc2FmZSB0ZW1wbGF0ZSAqL1xuICAgIGVycm9yVGVtcGxhdGU6IFNhZmVIdG1sO1xuICAgIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIGFuIGVycm9yIG9jY3VycyAqL1xuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8RXJyb3I+O1xuICAgIC8qKiBsb2FkaW5nIGVycm9yICovXG4gICAgbG9hZEVycm9yOiBFcnJvcjtcbiAgICByZWFkb25seSBpbWFnZUxvYWRTdWNjZXNzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGltYWdlTG9hZEZhaWxlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcihfc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBvblByb2dyZXNzKHsgbG9hZGVkLCB0b3RhbCB9OiB7XG4gICAgICAgIGxvYWRlZDogbnVtYmVyO1xuICAgICAgICB0b3RhbDogbnVtYmVyO1xuICAgIH0pOiB2b2lkO1xuICAgIG9uTG9hZGVkKGJsb2JVcmw6IHN0cmluZyk6IHZvaWQ7XG4gICAgb25FcnJvcihlcnI6IEVycm9yKTogdm9pZDtcbn1cbiJdfQ==