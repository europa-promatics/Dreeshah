import { OnDestroy, OnInit, OnChanges, NgZone, ElementRef, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { GalleryConfig } from '../models/config.model';
import { GalleryState, GalleryError } from '../models/gallery.model';
import { SliderState } from '../models/slider.model';
import * as ɵngcc0 from '@angular/core';
export declare class GalleryThumbsComponent implements OnInit, OnChanges, OnDestroy {
    private _el;
    private _zone;
    /** Sliding worker */
    private readonly _slidingWorker$;
    /** HammerJS instance */
    private _hammer;
    /** Current slider position in free sliding mode */
    private _freeModeCurrentOffset;
    /** Stream that emits sliding state */
    sliderState$: Observable<SliderState>;
    /** Gallery state */
    state: GalleryState;
    /** Gallery config */
    config: GalleryConfig;
    /** Stream that emits when the active item should change */
    action: EventEmitter<string | number>;
    /** Stream that emits when thumb is clicked */
    thumbClick: EventEmitter<number>;
    /** Stream that emits when an error occurs */
    error: EventEmitter<GalleryError>;
    /** Host height */
    height: string;
    /** Host width */
    width: string;
    constructor(_el: ElementRef, _zone: NgZone);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Sliding strict mode
     */
    private strictMode;
    /**
     * Sliding free mode
     */
    private freeMode;
    /**
     * Check if the minimum free scroll is exceeded (used in Bottom, Left directions)
     */
    private minFreeScrollExceeded;
    /**
     * Check if the maximum free scroll is exceeded (used in Top, Right directions)
     */
    private maxFreeScrollExceeded;
    /**
     * Convert sliding state to styles
     */
    private getSliderStyles;
    private verticalPan;
    private horizontalPan;
    private next;
    private prev;
    private updateSlider;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GalleryThumbsComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GalleryThumbsComponent, "gallery-thumbs", never, {
    "state": "state";
    "config": "config";
}, {
    "action": "action";
    "thumbClick": "thumbClick";
    "error": "error";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS10aHVtYnMuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdhbGxlcnktdGh1bWJzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0RBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBPbkluaXQsIE9uQ2hhbmdlcywgTmdab25lLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEdhbGxlcnlDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IEdhbGxlcnlTdGF0ZSwgR2FsbGVyeUVycm9yIH0gZnJvbSAnLi4vbW9kZWxzL2dhbGxlcnkubW9kZWwnO1xuaW1wb3J0IHsgU2xpZGVyU3RhdGUgfSBmcm9tICcuLi9tb2RlbHMvc2xpZGVyLm1vZGVsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdhbGxlcnlUaHVtYnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9lbDtcbiAgICBwcml2YXRlIF96b25lO1xuICAgIC8qKiBTbGlkaW5nIHdvcmtlciAqL1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3NsaWRpbmdXb3JrZXIkO1xuICAgIC8qKiBIYW1tZXJKUyBpbnN0YW5jZSAqL1xuICAgIHByaXZhdGUgX2hhbW1lcjtcbiAgICAvKiogQ3VycmVudCBzbGlkZXIgcG9zaXRpb24gaW4gZnJlZSBzbGlkaW5nIG1vZGUgKi9cbiAgICBwcml2YXRlIF9mcmVlTW9kZUN1cnJlbnRPZmZzZXQ7XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHNsaWRpbmcgc3RhdGUgKi9cbiAgICBzbGlkZXJTdGF0ZSQ6IE9ic2VydmFibGU8U2xpZGVyU3RhdGU+O1xuICAgIC8qKiBHYWxsZXJ5IHN0YXRlICovXG4gICAgc3RhdGU6IEdhbGxlcnlTdGF0ZTtcbiAgICAvKiogR2FsbGVyeSBjb25maWcgKi9cbiAgICBjb25maWc6IEdhbGxlcnlDb25maWc7XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gdGhlIGFjdGl2ZSBpdGVtIHNob3VsZCBjaGFuZ2UgKi9cbiAgICBhY3Rpb246IEV2ZW50RW1pdHRlcjxzdHJpbmcgfCBudW1iZXI+O1xuICAgIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRodW1iIGlzIGNsaWNrZWQgKi9cbiAgICB0aHVtYkNsaWNrOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBhbiBlcnJvciBvY2N1cnMgKi9cbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPEdhbGxlcnlFcnJvcj47XG4gICAgLyoqIEhvc3QgaGVpZ2h0ICovXG4gICAgaGVpZ2h0OiBzdHJpbmc7XG4gICAgLyoqIEhvc3Qgd2lkdGggKi9cbiAgICB3aWR0aDogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKF9lbDogRWxlbWVudFJlZiwgX3pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogU2xpZGluZyBzdHJpY3QgbW9kZVxuICAgICAqL1xuICAgIHByaXZhdGUgc3RyaWN0TW9kZTtcbiAgICAvKipcbiAgICAgKiBTbGlkaW5nIGZyZWUgbW9kZVxuICAgICAqL1xuICAgIHByaXZhdGUgZnJlZU1vZGU7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIG1pbmltdW0gZnJlZSBzY3JvbGwgaXMgZXhjZWVkZWQgKHVzZWQgaW4gQm90dG9tLCBMZWZ0IGRpcmVjdGlvbnMpXG4gICAgICovXG4gICAgcHJpdmF0ZSBtaW5GcmVlU2Nyb2xsRXhjZWVkZWQ7XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIG1heGltdW0gZnJlZSBzY3JvbGwgaXMgZXhjZWVkZWQgKHVzZWQgaW4gVG9wLCBSaWdodCBkaXJlY3Rpb25zKVxuICAgICAqL1xuICAgIHByaXZhdGUgbWF4RnJlZVNjcm9sbEV4Y2VlZGVkO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnQgc2xpZGluZyBzdGF0ZSB0byBzdHlsZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFNsaWRlclN0eWxlcztcbiAgICBwcml2YXRlIHZlcnRpY2FsUGFuO1xuICAgIHByaXZhdGUgaG9yaXpvbnRhbFBhbjtcbiAgICBwcml2YXRlIG5leHQ7XG4gICAgcHJpdmF0ZSBwcmV2O1xuICAgIHByaXZhdGUgdXBkYXRlU2xpZGVyO1xufVxuIl19