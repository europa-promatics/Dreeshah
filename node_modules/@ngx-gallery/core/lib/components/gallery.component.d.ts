import { OnInit, OnChanges, OnDestroy, SimpleChanges, TemplateRef, EventEmitter } from '@angular/core';
import { Gallery } from '../services/gallery.service';
import { GalleryRef } from '../services/gallery-ref';
import { GalleryError, GalleryItem, GalleryState } from '../models/gallery.model';
import * as ɵngcc0 from '@angular/core';
export declare class GalleryComponent implements OnInit, OnChanges, OnDestroy {
    private _gallery;
    galleryRef: GalleryRef;
    id: string;
    items: GalleryItem[];
    nav: boolean;
    dots: boolean;
    loop: boolean;
    thumb: boolean;
    zoomOut: number;
    counter: boolean;
    dotsSize: number;
    autoPlay: boolean;
    gestures: boolean;
    thumbWidth: number;
    thumbHeight: number;
    disableThumb: boolean;
    panSensitivity: number;
    playerInterval: number;
    itemTemplate: TemplateRef<any>;
    thumbTemplate: TemplateRef<any>;
    thumbMode: 'strict' | 'free';
    imageSize: 'cover' | 'contain';
    dotsPosition: 'top' | 'bottom';
    counterPosition: 'top' | 'bottom';
    slidingDirection: 'horizontal' | 'vertical';
    loadingStrategy: 'preload' | 'lazy' | 'default';
    thumbPosition: 'top' | 'left' | 'right' | 'bottom';
    /** Destroy gallery ref on component destroy event */
    destroyRef: boolean;
    /** Skip initializing the config with components inputs (Lightbox mode) */
    skipInitConfig: boolean;
    itemClick: EventEmitter<number>;
    thumbClick: EventEmitter<number>;
    playingChange: EventEmitter<GalleryState>;
    indexChange: EventEmitter<GalleryState>;
    itemsChange: EventEmitter<GalleryState>;
    error: EventEmitter<GalleryError>;
    private _itemClick$;
    private _thumbClick$;
    private _itemChange$;
    private _indexChange$;
    private _playingChange$;
    private _playerListener$;
    constructor(_gallery: Gallery);
    private getConfig;
    onAction(i: string | number): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    onItemClick(i: number): void;
    onThumbClick(i: number): void;
    onError(err: GalleryError): void;
    load(items: GalleryItem[]): void;
    add(item: GalleryItem, active?: boolean): void;
    addImage(data: any, active?: boolean): void;
    addVideo(data: any, active?: boolean): void;
    addIframe(data: any, active?: boolean): void;
    addYoutube(data: any, active?: boolean): void;
    remove(i: number): void;
    next(): void;
    prev(): void;
    set(i: number): void;
    reset(): void;
    play(interval?: number): void;
    stop(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GalleryComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GalleryComponent, "gallery", never, {
    "nav": "nav";
    "dots": "dots";
    "loop": "loop";
    "thumb": "thumb";
    "zoomOut": "zoomOut";
    "counter": "counter";
    "dotsSize": "dotsSize";
    "autoPlay": "autoPlay";
    "gestures": "gestures";
    "thumbWidth": "thumbWidth";
    "thumbHeight": "thumbHeight";
    "disableThumb": "disableThumb";
    "panSensitivity": "panSensitivity";
    "playerInterval": "playerInterval";
    "itemTemplate": "itemTemplate";
    "thumbTemplate": "thumbTemplate";
    "thumbMode": "thumbMode";
    "imageSize": "imageSize";
    "dotsPosition": "dotsPosition";
    "counterPosition": "counterPosition";
    "slidingDirection": "slidingDirection";
    "loadingStrategy": "loadingStrategy";
    "thumbPosition": "thumbPosition";
    "destroyRef": "destroyRef";
    "skipInitConfig": "skipInitConfig";
    "id": "id";
    "items": "items";
}, {
    "itemClick": "itemClick";
    "thumbClick": "thumbClick";
    "playingChange": "playingChange";
    "indexChange": "indexChange";
    "itemsChange": "itemsChange";
    "error": "error";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZ2FsbGVyeS5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEdhbGxlcnkgfSBmcm9tICcuLi9zZXJ2aWNlcy9nYWxsZXJ5LnNlcnZpY2UnO1xuaW1wb3J0IHsgR2FsbGVyeVJlZiB9IGZyb20gJy4uL3NlcnZpY2VzL2dhbGxlcnktcmVmJztcbmltcG9ydCB7IEdhbGxlcnlFcnJvciwgR2FsbGVyeUl0ZW0sIEdhbGxlcnlTdGF0ZSB9IGZyb20gJy4uL21vZGVscy9nYWxsZXJ5Lm1vZGVsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdhbGxlcnlDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9nYWxsZXJ5O1xuICAgIGdhbGxlcnlSZWY6IEdhbGxlcnlSZWY7XG4gICAgaWQ6IHN0cmluZztcbiAgICBpdGVtczogR2FsbGVyeUl0ZW1bXTtcbiAgICBuYXY6IGJvb2xlYW47XG4gICAgZG90czogYm9vbGVhbjtcbiAgICBsb29wOiBib29sZWFuO1xuICAgIHRodW1iOiBib29sZWFuO1xuICAgIHpvb21PdXQ6IG51bWJlcjtcbiAgICBjb3VudGVyOiBib29sZWFuO1xuICAgIGRvdHNTaXplOiBudW1iZXI7XG4gICAgYXV0b1BsYXk6IGJvb2xlYW47XG4gICAgZ2VzdHVyZXM6IGJvb2xlYW47XG4gICAgdGh1bWJXaWR0aDogbnVtYmVyO1xuICAgIHRodW1iSGVpZ2h0OiBudW1iZXI7XG4gICAgZGlzYWJsZVRodW1iOiBib29sZWFuO1xuICAgIHBhblNlbnNpdGl2aXR5OiBudW1iZXI7XG4gICAgcGxheWVySW50ZXJ2YWw6IG51bWJlcjtcbiAgICBpdGVtVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG4gICAgdGh1bWJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcbiAgICB0aHVtYk1vZGU6ICdzdHJpY3QnIHwgJ2ZyZWUnO1xuICAgIGltYWdlU2l6ZTogJ2NvdmVyJyB8ICdjb250YWluJztcbiAgICBkb3RzUG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbSc7XG4gICAgY291bnRlclBvc2l0aW9uOiAndG9wJyB8ICdib3R0b20nO1xuICAgIHNsaWRpbmdEaXJlY3Rpb246ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCc7XG4gICAgbG9hZGluZ1N0cmF0ZWd5OiAncHJlbG9hZCcgfCAnbGF6eScgfCAnZGVmYXVsdCc7XG4gICAgdGh1bWJQb3NpdGlvbjogJ3RvcCcgfCAnbGVmdCcgfCAncmlnaHQnIHwgJ2JvdHRvbSc7XG4gICAgLyoqIERlc3Ryb3kgZ2FsbGVyeSByZWYgb24gY29tcG9uZW50IGRlc3Ryb3kgZXZlbnQgKi9cbiAgICBkZXN0cm95UmVmOiBib29sZWFuO1xuICAgIC8qKiBTa2lwIGluaXRpYWxpemluZyB0aGUgY29uZmlnIHdpdGggY29tcG9uZW50cyBpbnB1dHMgKExpZ2h0Ym94IG1vZGUpICovXG4gICAgc2tpcEluaXRDb25maWc6IGJvb2xlYW47XG4gICAgaXRlbUNsaWNrOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICB0aHVtYkNsaWNrOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBwbGF5aW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8R2FsbGVyeVN0YXRlPjtcbiAgICBpbmRleENoYW5nZTogRXZlbnRFbWl0dGVyPEdhbGxlcnlTdGF0ZT47XG4gICAgaXRlbXNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxHYWxsZXJ5U3RhdGU+O1xuICAgIGVycm9yOiBFdmVudEVtaXR0ZXI8R2FsbGVyeUVycm9yPjtcbiAgICBwcml2YXRlIF9pdGVtQ2xpY2skO1xuICAgIHByaXZhdGUgX3RodW1iQ2xpY2skO1xuICAgIHByaXZhdGUgX2l0ZW1DaGFuZ2UkO1xuICAgIHByaXZhdGUgX2luZGV4Q2hhbmdlJDtcbiAgICBwcml2YXRlIF9wbGF5aW5nQ2hhbmdlJDtcbiAgICBwcml2YXRlIF9wbGF5ZXJMaXN0ZW5lciQ7XG4gICAgY29uc3RydWN0b3IoX2dhbGxlcnk6IEdhbGxlcnkpO1xuICAgIHByaXZhdGUgZ2V0Q29uZmlnO1xuICAgIG9uQWN0aW9uKGk6IHN0cmluZyB8IG51bWJlcik6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG9uSXRlbUNsaWNrKGk6IG51bWJlcik6IHZvaWQ7XG4gICAgb25UaHVtYkNsaWNrKGk6IG51bWJlcik6IHZvaWQ7XG4gICAgb25FcnJvcihlcnI6IEdhbGxlcnlFcnJvcik6IHZvaWQ7XG4gICAgbG9hZChpdGVtczogR2FsbGVyeUl0ZW1bXSk6IHZvaWQ7XG4gICAgYWRkKGl0ZW06IEdhbGxlcnlJdGVtLCBhY3RpdmU/OiBib29sZWFuKTogdm9pZDtcbiAgICBhZGRJbWFnZShkYXRhOiBhbnksIGFjdGl2ZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIGFkZFZpZGVvKGRhdGE6IGFueSwgYWN0aXZlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgYWRkSWZyYW1lKGRhdGE6IGFueSwgYWN0aXZlPzogYm9vbGVhbik6IHZvaWQ7XG4gICAgYWRkWW91dHViZShkYXRhOiBhbnksIGFjdGl2ZT86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHJlbW92ZShpOiBudW1iZXIpOiB2b2lkO1xuICAgIG5leHQoKTogdm9pZDtcbiAgICBwcmV2KCk6IHZvaWQ7XG4gICAgc2V0KGk6IG51bWJlcik6IHZvaWQ7XG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICBwbGF5KGludGVydmFsPzogbnVtYmVyKTogdm9pZDtcbiAgICBzdG9wKCk6IHZvaWQ7XG59XG4iXX0=