import { OnDestroy, OnInit, OnChanges, NgZone, ElementRef, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { GalleryState, GalleryError } from '../models/gallery.model';
import { GalleryConfig } from '../models/config.model';
import { SliderState } from '../models/slider.model';
import * as ɵngcc0 from '@angular/core';
export declare class GallerySliderComponent implements OnInit, OnChanges, OnDestroy {
    private _el;
    private _zone;
    private platform;
    /** Sliding worker */
    private readonly _slidingWorker$;
    /** HammerJS instance */
    private _hammer;
    /** Stream that emits when the view is re-sized */
    private _resizeSub$;
    /** Stream that emits sliding state */
    sliderState$: Observable<SliderState>;
    /** Gallery state */
    state: GalleryState;
    /** Gallery config */
    config: GalleryConfig;
    /** Stream that emits when the active item should change */
    action: EventEmitter<string | number>;
    /** Stream that emits when item is clicked */
    itemClick: EventEmitter<number>;
    /** Stream that emits when an error occurs */
    error: EventEmitter<GalleryError>;
    /** Item zoom */
    readonly zoom: {
        transform: string;
    };
    constructor(_el: ElementRef, _zone: NgZone, platform: Object);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    /**
     * Convert sliding state to styles
     */
    private getSliderStyles;
    private verticalPan;
    private horizontalPan;
    private next;
    private prev;
    private updateSlider;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GallerySliderComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<GallerySliderComponent, "gallery-slider", never, {
    "state": "state";
    "config": "config";
}, {
    "action": "action";
    "itemClick": "itemClick";
    "error": "error";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FsbGVyeS1zbGlkZXIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImdhbGxlcnktc2xpZGVyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFLQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBdUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBPbkluaXQsIE9uQ2hhbmdlcywgTmdab25lLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEdhbGxlcnlTdGF0ZSwgR2FsbGVyeUVycm9yIH0gZnJvbSAnLi4vbW9kZWxzL2dhbGxlcnkubW9kZWwnO1xuaW1wb3J0IHsgR2FsbGVyeUNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9jb25maWcubW9kZWwnO1xuaW1wb3J0IHsgU2xpZGVyU3RhdGUgfSBmcm9tICcuLi9tb2RlbHMvc2xpZGVyLm1vZGVsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEdhbGxlcnlTbGlkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIF9lbDtcbiAgICBwcml2YXRlIF96b25lO1xuICAgIHByaXZhdGUgcGxhdGZvcm07XG4gICAgLyoqIFNsaWRpbmcgd29ya2VyICovXG4gICAgcHJpdmF0ZSByZWFkb25seSBfc2xpZGluZ1dvcmtlciQ7XG4gICAgLyoqIEhhbW1lckpTIGluc3RhbmNlICovXG4gICAgcHJpdmF0ZSBfaGFtbWVyO1xuICAgIC8qKiBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRoZSB2aWV3IGlzIHJlLXNpemVkICovXG4gICAgcHJpdmF0ZSBfcmVzaXplU3ViJDtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgc2xpZGluZyBzdGF0ZSAqL1xuICAgIHNsaWRlclN0YXRlJDogT2JzZXJ2YWJsZTxTbGlkZXJTdGF0ZT47XG4gICAgLyoqIEdhbGxlcnkgc3RhdGUgKi9cbiAgICBzdGF0ZTogR2FsbGVyeVN0YXRlO1xuICAgIC8qKiBHYWxsZXJ5IGNvbmZpZyAqL1xuICAgIGNvbmZpZzogR2FsbGVyeUNvbmZpZztcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB0aGUgYWN0aXZlIGl0ZW0gc2hvdWxkIGNoYW5nZSAqL1xuICAgIGFjdGlvbjogRXZlbnRFbWl0dGVyPHN0cmluZyB8IG51bWJlcj47XG4gICAgLyoqIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gaXRlbSBpcyBjbGlja2VkICovXG4gICAgaXRlbUNsaWNrOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBhbiBlcnJvciBvY2N1cnMgKi9cbiAgICBlcnJvcjogRXZlbnRFbWl0dGVyPEdhbGxlcnlFcnJvcj47XG4gICAgLyoqIEl0ZW0gem9vbSAqL1xuICAgIHJlYWRvbmx5IHpvb206IHtcbiAgICAgICAgdHJhbnNmb3JtOiBzdHJpbmc7XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihfZWw6IEVsZW1lbnRSZWYsIF96b25lOiBOZ1pvbmUsIHBsYXRmb3JtOiBPYmplY3QpO1xuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENvbnZlcnQgc2xpZGluZyBzdGF0ZSB0byBzdHlsZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFNsaWRlclN0eWxlcztcbiAgICBwcml2YXRlIHZlcnRpY2FsUGFuO1xuICAgIHByaXZhdGUgaG9yaXpvbnRhbFBhbjtcbiAgICBwcml2YXRlIG5leHQ7XG4gICAgcHJpdmF0ZSBwcmV2O1xuICAgIHByaXZhdGUgdXBkYXRlU2xpZGVyO1xufVxuIl19