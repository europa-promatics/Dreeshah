import { ChangeDetectorRef, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';
import { ThemePalette } from '@angular/material/core';
import { NgxMatDateAdapter } from './core/date-adapter';
import * as ɵngcc0 from '@angular/core';
export declare class NgxMatTimepickerComponent<D> implements ControlValueAccessor, OnInit, OnChanges {
    _dateAdapter: NgxMatDateAdapter<D>;
    private cd;
    private formBuilder;
    form: FormGroup;
    disabled: boolean;
    showSpinners: boolean;
    stepHour: number;
    stepMinute: number;
    stepSecond: number;
    showSeconds: boolean;
    disableMinute: boolean;
    enableMeridian: boolean;
    defaultTime: number[];
    color: ThemePalette;
    meridian: string;
    /** Hour */
    private readonly hour;
    private readonly minute;
    private readonly second;
    /** Whether or not the form is valid */
    readonly valid: boolean;
    private _onChange;
    private _onTouched;
    private _disabled;
    private _model;
    private _destroyed;
    pattern: RegExp;
    constructor(_dateAdapter: NgxMatDateAdapter<D>, cd: ChangeDetectorRef, formBuilder: FormBuilder);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * Writes a new value to the element.
     * @param obj
     */
    writeValue(val: D): void;
    /** Registers a callback function that is called when the control's value changes in the UI. */
    registerOnChange(fn: (_: any) => {}): void;
    /**
     * Set the function to be called when the control receives a touch event.
     */
    registerOnTouched(fn: () => {}): void;
    /** Enables or disables the appropriate DOM element */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Format input
     * @param input
     */
    formatInput(input: HTMLInputElement): void;
    /** Toggle meridian */
    toggleMeridian(): void;
    /** Change property of time */
    change(prop: string, up?: boolean): void;
    /** Update controls of form by model */
    private _updateHourMinuteSecond;
    /** Update model */
    private _updateModel;
    /**
     * Get next value by property
     * @param prop
     * @param up
     */
    private _getNextValueByProp;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxMatTimepickerComponent<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgxMatTimepickerComponent<any>, "ngx-mat-timepicker", ["ngxMatTimepicker"], {
    "disabled": "disabled";
    "showSpinners": "showSpinners";
    "stepHour": "stepHour";
    "stepMinute": "stepMinute";
    "stepSecond": "stepSecond";
    "showSeconds": "showSeconds";
    "disableMinute": "disableMinute";
    "enableMeridian": "enableMeridian";
    "color": "color";
    "defaultTime": "defaultTime";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidGltZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IFRoZW1lUGFsZXR0ZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hNYXREYXRlQWRhcHRlciB9IGZyb20gJy4vY29yZS9kYXRlLWFkYXB0ZXInO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hNYXRUaW1lcGlja2VyQ29tcG9uZW50PEQ+IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIF9kYXRlQWRhcHRlcjogTmd4TWF0RGF0ZUFkYXB0ZXI8RD47XHJcbiAgICBwcml2YXRlIGNkO1xyXG4gICAgcHJpdmF0ZSBmb3JtQnVpbGRlcjtcclxuICAgIGZvcm06IEZvcm1Hcm91cDtcclxuICAgIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgc2hvd1NwaW5uZXJzOiBib29sZWFuO1xyXG4gICAgc3RlcEhvdXI6IG51bWJlcjtcclxuICAgIHN0ZXBNaW51dGU6IG51bWJlcjtcclxuICAgIHN0ZXBTZWNvbmQ6IG51bWJlcjtcclxuICAgIHNob3dTZWNvbmRzOiBib29sZWFuO1xyXG4gICAgZGlzYWJsZU1pbnV0ZTogYm9vbGVhbjtcclxuICAgIGVuYWJsZU1lcmlkaWFuOiBib29sZWFuO1xyXG4gICAgZGVmYXVsdFRpbWU6IG51bWJlcltdO1xyXG4gICAgY29sb3I6IFRoZW1lUGFsZXR0ZTtcclxuICAgIG1lcmlkaWFuOiBzdHJpbmc7XHJcbiAgICAvKiogSG91ciAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBob3VyO1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBtaW51dGU7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY29uZDtcclxuICAgIC8qKiBXaGV0aGVyIG9yIG5vdCB0aGUgZm9ybSBpcyB2YWxpZCAqL1xyXG4gICAgcmVhZG9ubHkgdmFsaWQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9vbkNoYW5nZTtcclxuICAgIHByaXZhdGUgX29uVG91Y2hlZDtcclxuICAgIHByaXZhdGUgX2Rpc2FibGVkO1xyXG4gICAgcHJpdmF0ZSBfbW9kZWw7XHJcbiAgICBwcml2YXRlIF9kZXN0cm95ZWQ7XHJcbiAgICBwYXR0ZXJuOiBSZWdFeHA7XHJcbiAgICBjb25zdHJ1Y3RvcihfZGF0ZUFkYXB0ZXI6IE5neE1hdERhdGVBZGFwdGVyPEQ+LCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIGZvcm1CdWlsZGVyOiBGb3JtQnVpbGRlcik7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZXMgYSBuZXcgdmFsdWUgdG8gdGhlIGVsZW1lbnQuXHJcbiAgICAgKiBAcGFyYW0gb2JqXHJcbiAgICAgKi9cclxuICAgIHdyaXRlVmFsdWUodmFsOiBEKTogdm9pZDtcclxuICAgIC8qKiBSZWdpc3RlcnMgYSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSBjb250cm9sJ3MgdmFsdWUgY2hhbmdlcyBpbiB0aGUgVUkuICovXHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogYW55KSA9PiB7fSk6IHZvaWQ7XHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGNvbnRyb2wgcmVjZWl2ZXMgYSB0b3VjaCBldmVudC5cclxuICAgICAqL1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHt9KTogdm9pZDtcclxuICAgIC8qKiBFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBhcHByb3ByaWF0ZSBET00gZWxlbWVudCAqL1xyXG4gICAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogRm9ybWF0IGlucHV0XHJcbiAgICAgKiBAcGFyYW0gaW5wdXRcclxuICAgICAqL1xyXG4gICAgZm9ybWF0SW5wdXQoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQpOiB2b2lkO1xyXG4gICAgLyoqIFRvZ2dsZSBtZXJpZGlhbiAqL1xyXG4gICAgdG9nZ2xlTWVyaWRpYW4oKTogdm9pZDtcclxuICAgIC8qKiBDaGFuZ2UgcHJvcGVydHkgb2YgdGltZSAqL1xyXG4gICAgY2hhbmdlKHByb3A6IHN0cmluZywgdXA/OiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKiBVcGRhdGUgY29udHJvbHMgb2YgZm9ybSBieSBtb2RlbCAqL1xyXG4gICAgcHJpdmF0ZSBfdXBkYXRlSG91ck1pbnV0ZVNlY29uZDtcclxuICAgIC8qKiBVcGRhdGUgbW9kZWwgKi9cclxuICAgIHByaXZhdGUgX3VwZGF0ZU1vZGVsO1xyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgbmV4dCB2YWx1ZSBieSBwcm9wZXJ0eVxyXG4gICAgICogQHBhcmFtIHByb3BcclxuICAgICAqIEBwYXJhbSB1cFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIF9nZXROZXh0VmFsdWVCeVByb3A7XHJcbn1cclxuIl19