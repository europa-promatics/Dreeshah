/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { InjectionToken } from '@angular/core';
import * as _moment from 'moment';
import { Moment } from 'moment';
import { NgxMatDateAdapter } from '@angular-material-components/datetime-picker';
/** Configurable options for {@see MomentDateAdapter}. */
import * as ɵngcc0 from '@angular/core';
export interface NgxMatMomentDateAdapterOptions {
    /**
     * When enabled, the dates have to match the format exactly.
     * See https://momentjs.com/guides/#/parsing/strict-mode/.
     */
    strict?: boolean;
    /**
     * Turns the use of utc dates on or off.
     * Changing this will change how Angular Material components like DatePicker output dates.
     * {@default false}
     */
    useUtc?: boolean;
}
/** InjectionToken for moment date adapter to configure options. */
export declare const NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS: InjectionToken<NgxMatMomentDateAdapterOptions>;
/** @docs-private */
export declare function NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY(): NgxMatMomentDateAdapterOptions;
/** Adapts Moment.js Dates for use with Angular Material. */
export declare class NgxMatMomentAdapter extends NgxMatDateAdapter<Moment> {
    private _options?;
    private _localeData;
    constructor(dateLocale: string, _options?: NgxMatMomentDateAdapterOptions);
    setLocale(locale: string): void;
    getYear(date: Moment): number;
    getMonth(date: Moment): number;
    getDate(date: Moment): number;
    getDayOfWeek(date: Moment): number;
    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];
    getDateNames(): string[];
    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];
    getYearName(date: Moment): string;
    getFirstDayOfWeek(): number;
    getNumDaysInMonth(date: Moment): number;
    clone(date: Moment): Moment;
    createDate(year: number, month: number, date: number): Moment;
    today(): Moment;
    parse(value: any, parseFormat: string | string[]): Moment | null;
    format(date: Moment, displayFormat: string): string;
    addCalendarYears(date: Moment, years: number): Moment;
    addCalendarMonths(date: Moment, months: number): Moment;
    addCalendarDays(date: Moment, days: number): Moment;
    toIso8601(date: Moment): string;
    /**
     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings
     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty
     * string into null. Returns an invalid date for all other values.
     */
    deserialize(value: any): Moment | null;
    isDateInstance(obj: any): boolean;
    isValid(date: Moment): boolean;
    invalid(): Moment;
    getHour(date: _moment.Moment): number;
    getMinute(date: _moment.Moment): number;
    getSecond(date: _moment.Moment): number;
    setHour(date: _moment.Moment, value: number): void;
    setMinute(date: _moment.Moment, value: number): void;
    setSecond(date: _moment.Moment, value: number): void;
    /** Creates a Moment instance while respecting the current UTC settings. */
    private _createMoment;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxMatMomentAdapter>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NgxMatMomentAdapter>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9tZW50LWFkYXB0ZXIuZC50cyIsInNvdXJjZXMiOlsibW9tZW50LWFkYXB0ZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkRBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcclxuICovXHJcbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIF9tb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgTW9tZW50IH0gZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgTmd4TWF0RGF0ZUFkYXB0ZXIgfSBmcm9tICdAYW5ndWxhci1tYXRlcmlhbC1jb21wb25lbnRzL2RhdGV0aW1lLXBpY2tlcic7XHJcbi8qKiBDb25maWd1cmFibGUgb3B0aW9ucyBmb3Ige0BzZWUgTW9tZW50RGF0ZUFkYXB0ZXJ9LiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE5neE1hdE1vbWVudERhdGVBZGFwdGVyT3B0aW9ucyB7XHJcbiAgICAvKipcclxuICAgICAqIFdoZW4gZW5hYmxlZCwgdGhlIGRhdGVzIGhhdmUgdG8gbWF0Y2ggdGhlIGZvcm1hdCBleGFjdGx5LlxyXG4gICAgICogU2VlIGh0dHBzOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3BhcnNpbmcvc3RyaWN0LW1vZGUvLlxyXG4gICAgICovXHJcbiAgICBzdHJpY3Q/OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUdXJucyB0aGUgdXNlIG9mIHV0YyBkYXRlcyBvbiBvciBvZmYuXHJcbiAgICAgKiBDaGFuZ2luZyB0aGlzIHdpbGwgY2hhbmdlIGhvdyBBbmd1bGFyIE1hdGVyaWFsIGNvbXBvbmVudHMgbGlrZSBEYXRlUGlja2VyIG91dHB1dCBkYXRlcy5cclxuICAgICAqIHtAZGVmYXVsdCBmYWxzZX1cclxuICAgICAqL1xyXG4gICAgdXNlVXRjPzogYm9vbGVhbjtcclxufVxyXG4vKiogSW5qZWN0aW9uVG9rZW4gZm9yIG1vbWVudCBkYXRlIGFkYXB0ZXIgdG8gY29uZmlndXJlIG9wdGlvbnMuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IE5HWF9NQVRfTU9NRU5UX0RBVEVfQURBUFRFUl9PUFRJT05TOiBJbmplY3Rpb25Ub2tlbjxOZ3hNYXRNb21lbnREYXRlQWRhcHRlck9wdGlvbnM+O1xyXG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xyXG5leHBvcnQgZGVjbGFyZSBmdW5jdGlvbiBOR1hfTUFUX01PTUVOVF9EQVRFX0FEQVBURVJfT1BUSU9OU19GQUNUT1JZKCk6IE5neE1hdE1vbWVudERhdGVBZGFwdGVyT3B0aW9ucztcclxuLyoqIEFkYXB0cyBNb21lbnQuanMgRGF0ZXMgZm9yIHVzZSB3aXRoIEFuZ3VsYXIgTWF0ZXJpYWwuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neE1hdE1vbWVudEFkYXB0ZXIgZXh0ZW5kcyBOZ3hNYXREYXRlQWRhcHRlcjxNb21lbnQ+IHtcclxuICAgIHByaXZhdGUgX29wdGlvbnM/O1xyXG4gICAgcHJpdmF0ZSBfbG9jYWxlRGF0YTtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGVMb2NhbGU6IHN0cmluZywgX29wdGlvbnM/OiBOZ3hNYXRNb21lbnREYXRlQWRhcHRlck9wdGlvbnMpO1xyXG4gICAgc2V0TG9jYWxlKGxvY2FsZTogc3RyaW5nKTogdm9pZDtcclxuICAgIGdldFllYXIoZGF0ZTogTW9tZW50KTogbnVtYmVyO1xyXG4gICAgZ2V0TW9udGgoZGF0ZTogTW9tZW50KTogbnVtYmVyO1xyXG4gICAgZ2V0RGF0ZShkYXRlOiBNb21lbnQpOiBudW1iZXI7XHJcbiAgICBnZXREYXlPZldlZWsoZGF0ZTogTW9tZW50KTogbnVtYmVyO1xyXG4gICAgZ2V0TW9udGhOYW1lcyhzdHlsZTogJ2xvbmcnIHwgJ3Nob3J0JyB8ICduYXJyb3cnKTogc3RyaW5nW107XHJcbiAgICBnZXREYXRlTmFtZXMoKTogc3RyaW5nW107XHJcbiAgICBnZXREYXlPZldlZWtOYW1lcyhzdHlsZTogJ2xvbmcnIHwgJ3Nob3J0JyB8ICduYXJyb3cnKTogc3RyaW5nW107XHJcbiAgICBnZXRZZWFyTmFtZShkYXRlOiBNb21lbnQpOiBzdHJpbmc7XHJcbiAgICBnZXRGaXJzdERheU9mV2VlaygpOiBudW1iZXI7XHJcbiAgICBnZXROdW1EYXlzSW5Nb250aChkYXRlOiBNb21lbnQpOiBudW1iZXI7XHJcbiAgICBjbG9uZShkYXRlOiBNb21lbnQpOiBNb21lbnQ7XHJcbiAgICBjcmVhdGVEYXRlKHllYXI6IG51bWJlciwgbW9udGg6IG51bWJlciwgZGF0ZTogbnVtYmVyKTogTW9tZW50O1xyXG4gICAgdG9kYXkoKTogTW9tZW50O1xyXG4gICAgcGFyc2UodmFsdWU6IGFueSwgcGFyc2VGb3JtYXQ6IHN0cmluZyB8IHN0cmluZ1tdKTogTW9tZW50IHwgbnVsbDtcclxuICAgIGZvcm1hdChkYXRlOiBNb21lbnQsIGRpc3BsYXlGb3JtYXQ6IHN0cmluZyk6IHN0cmluZztcclxuICAgIGFkZENhbGVuZGFyWWVhcnMoZGF0ZTogTW9tZW50LCB5ZWFyczogbnVtYmVyKTogTW9tZW50O1xyXG4gICAgYWRkQ2FsZW5kYXJNb250aHMoZGF0ZTogTW9tZW50LCBtb250aHM6IG51bWJlcik6IE1vbWVudDtcclxuICAgIGFkZENhbGVuZGFyRGF5cyhkYXRlOiBNb21lbnQsIGRheXM6IG51bWJlcik6IE1vbWVudDtcclxuICAgIHRvSXNvODYwMShkYXRlOiBNb21lbnQpOiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIGdpdmVuIHZhbHVlIGlmIGdpdmVuIGEgdmFsaWQgTW9tZW50IG9yIG51bGwuIERlc2VyaWFsaXplcyB2YWxpZCBJU08gODYwMSBzdHJpbmdzXHJcbiAgICAgKiAoaHR0cHM6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzMzMzkudHh0KSBhbmQgdmFsaWQgRGF0ZSBvYmplY3RzIGludG8gdmFsaWQgTW9tZW50cyBhbmQgZW1wdHlcclxuICAgICAqIHN0cmluZyBpbnRvIG51bGwuIFJldHVybnMgYW4gaW52YWxpZCBkYXRlIGZvciBhbGwgb3RoZXIgdmFsdWVzLlxyXG4gICAgICovXHJcbiAgICBkZXNlcmlhbGl6ZSh2YWx1ZTogYW55KTogTW9tZW50IHwgbnVsbDtcclxuICAgIGlzRGF0ZUluc3RhbmNlKG9iajogYW55KTogYm9vbGVhbjtcclxuICAgIGlzVmFsaWQoZGF0ZTogTW9tZW50KTogYm9vbGVhbjtcclxuICAgIGludmFsaWQoKTogTW9tZW50O1xyXG4gICAgZ2V0SG91cihkYXRlOiBfbW9tZW50Lk1vbWVudCk6IG51bWJlcjtcclxuICAgIGdldE1pbnV0ZShkYXRlOiBfbW9tZW50Lk1vbWVudCk6IG51bWJlcjtcclxuICAgIGdldFNlY29uZChkYXRlOiBfbW9tZW50Lk1vbWVudCk6IG51bWJlcjtcclxuICAgIHNldEhvdXIoZGF0ZTogX21vbWVudC5Nb21lbnQsIHZhbHVlOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgc2V0TWludXRlKGRhdGU6IF9tb21lbnQuTW9tZW50LCB2YWx1ZTogbnVtYmVyKTogdm9pZDtcclxuICAgIHNldFNlY29uZChkYXRlOiBfbW9tZW50Lk1vbWVudCwgdmFsdWU6IG51bWJlcik6IHZvaWQ7XHJcbiAgICAvKiogQ3JlYXRlcyBhIE1vbWVudCBpbnN0YW5jZSB3aGlsZSByZXNwZWN0aW5nIHRoZSBjdXJyZW50IFVUQyBzZXR0aW5ncy4gKi9cclxuICAgIHByaXZhdGUgX2NyZWF0ZU1vbWVudDtcclxufVxyXG4iXX0=