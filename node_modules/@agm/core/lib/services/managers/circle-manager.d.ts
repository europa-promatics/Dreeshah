/// <reference types="googlemaps" />
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { AgmCircle } from '../../directives/circle';
import { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';
import * as ɵngcc0 from '@angular/core';
export declare class CircleManager {
    private _apiWrapper;
    private _zone;
    private _circles;
    constructor(_apiWrapper: GoogleMapsAPIWrapper, _zone: NgZone);
    addCircle(circle: AgmCircle): void;
    /**
     * Removes the given circle from the map.
     */
    removeCircle(circle: AgmCircle): Promise<void>;
    setOptions(circle: AgmCircle, options: google.maps.CircleOptions): Promise<void>;
    getBounds(circle: AgmCircle): Promise<google.maps.LatLngBounds>;
    getCenter(circle: AgmCircle): Promise<google.maps.LatLng>;
    getRadius(circle: AgmCircle): Promise<number>;
    setCenter(circle: AgmCircle): Promise<void>;
    setEditable(circle: AgmCircle): Promise<void>;
    setDraggable(circle: AgmCircle): Promise<void>;
    setVisible(circle: AgmCircle): Promise<void>;
    setRadius(circle: AgmCircle): Promise<void>;
    getNativeCircle(circle: AgmCircle): Promise<google.maps.Circle>;
    createEventObservable<T>(eventName: string, circle: AgmCircle): Observable<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CircleManager>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CircleManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2lyY2xlLW1hbmFnZXIuZC50cyIsInNvdXJjZXMiOlsiY2lyY2xlLW1hbmFnZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcUJBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJnb29nbGVtYXBzXCIgLz5cbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWdtQ2lyY2xlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9jaXJjbGUnO1xuaW1wb3J0IHsgR29vZ2xlTWFwc0FQSVdyYXBwZXIgfSBmcm9tICcuLi9nb29nbGUtbWFwcy1hcGktd3JhcHBlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDaXJjbGVNYW5hZ2VyIHtcbiAgICBwcml2YXRlIF9hcGlXcmFwcGVyO1xuICAgIHByaXZhdGUgX3pvbmU7XG4gICAgcHJpdmF0ZSBfY2lyY2xlcztcbiAgICBjb25zdHJ1Y3RvcihfYXBpV3JhcHBlcjogR29vZ2xlTWFwc0FQSVdyYXBwZXIsIF96b25lOiBOZ1pvbmUpO1xuICAgIGFkZENpcmNsZShjaXJjbGU6IEFnbUNpcmNsZSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgZ2l2ZW4gY2lyY2xlIGZyb20gdGhlIG1hcC5cbiAgICAgKi9cbiAgICByZW1vdmVDaXJjbGUoY2lyY2xlOiBBZ21DaXJjbGUpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNldE9wdGlvbnMoY2lyY2xlOiBBZ21DaXJjbGUsIG9wdGlvbnM6IGdvb2dsZS5tYXBzLkNpcmNsZU9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGdldEJvdW5kcyhjaXJjbGU6IEFnbUNpcmNsZSk6IFByb21pc2U8Z29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzPjtcbiAgICBnZXRDZW50ZXIoY2lyY2xlOiBBZ21DaXJjbGUpOiBQcm9taXNlPGdvb2dsZS5tYXBzLkxhdExuZz47XG4gICAgZ2V0UmFkaXVzKGNpcmNsZTogQWdtQ2lyY2xlKTogUHJvbWlzZTxudW1iZXI+O1xuICAgIHNldENlbnRlcihjaXJjbGU6IEFnbUNpcmNsZSk6IFByb21pc2U8dm9pZD47XG4gICAgc2V0RWRpdGFibGUoY2lyY2xlOiBBZ21DaXJjbGUpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNldERyYWdnYWJsZShjaXJjbGU6IEFnbUNpcmNsZSk6IFByb21pc2U8dm9pZD47XG4gICAgc2V0VmlzaWJsZShjaXJjbGU6IEFnbUNpcmNsZSk6IFByb21pc2U8dm9pZD47XG4gICAgc2V0UmFkaXVzKGNpcmNsZTogQWdtQ2lyY2xlKTogUHJvbWlzZTx2b2lkPjtcbiAgICBnZXROYXRpdmVDaXJjbGUoY2lyY2xlOiBBZ21DaXJjbGUpOiBQcm9taXNlPGdvb2dsZS5tYXBzLkNpcmNsZT47XG4gICAgY3JlYXRlRXZlbnRPYnNlcnZhYmxlPFQ+KGV2ZW50TmFtZTogc3RyaW5nLCBjaXJjbGU6IEFnbUNpcmNsZSk6IE9ic2VydmFibGU8VD47XG59XG4iXX0=