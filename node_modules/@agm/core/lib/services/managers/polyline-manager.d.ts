/// <reference types="googlemaps" />
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { AgmPolyline } from '../../directives/polyline';
import { MVCEvent } from '../../utils/mvcarray-utils';
import { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';
import * as ɵngcc0 from '@angular/core';
export declare class PolylineManager {
    private _mapsWrapper;
    private _zone;
    private _polylines;
    constructor(_mapsWrapper: GoogleMapsAPIWrapper, _zone: NgZone);
    private static _convertPoints;
    private static _convertPath;
    private static _convertIcons;
    addPolyline(line: AgmPolyline): void;
    updatePolylinePoints(line: AgmPolyline): Promise<void>;
    updateIconSequences(line: AgmPolyline): Promise<void>;
    setPolylineOptions(line: AgmPolyline, options: {
        [propName: string]: any;
    }): Promise<void>;
    deletePolyline(line: AgmPolyline): Promise<void>;
    private getMVCPath;
    getPath(agmPolyline: AgmPolyline): Promise<google.maps.LatLng[]>;
    createEventObservable<T>(eventName: string, line: AgmPolyline): Observable<T>;
    createPathEventObservable(line: AgmPolyline): Promise<Observable<MVCEvent<google.maps.LatLng>>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolylineManager>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PolylineManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9seWxpbmUtbWFuYWdlci5kLnRzIiwic291cmNlcyI6WyJwb2x5bGluZS1tYW5hZ2VyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJnb29nbGVtYXBzXCIgLz5cbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWdtUG9seWxpbmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3BvbHlsaW5lJztcbmltcG9ydCB7IE1WQ0V2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvbXZjYXJyYXktdXRpbHMnO1xuaW1wb3J0IHsgR29vZ2xlTWFwc0FQSVdyYXBwZXIgfSBmcm9tICcuLi9nb29nbGUtbWFwcy1hcGktd3JhcHBlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb2x5bGluZU1hbmFnZXIge1xuICAgIHByaXZhdGUgX21hcHNXcmFwcGVyO1xuICAgIHByaXZhdGUgX3pvbmU7XG4gICAgcHJpdmF0ZSBfcG9seWxpbmVzO1xuICAgIGNvbnN0cnVjdG9yKF9tYXBzV3JhcHBlcjogR29vZ2xlTWFwc0FQSVdyYXBwZXIsIF96b25lOiBOZ1pvbmUpO1xuICAgIHByaXZhdGUgc3RhdGljIF9jb252ZXJ0UG9pbnRzO1xuICAgIHByaXZhdGUgc3RhdGljIF9jb252ZXJ0UGF0aDtcbiAgICBwcml2YXRlIHN0YXRpYyBfY29udmVydEljb25zO1xuICAgIGFkZFBvbHlsaW5lKGxpbmU6IEFnbVBvbHlsaW5lKTogdm9pZDtcbiAgICB1cGRhdGVQb2x5bGluZVBvaW50cyhsaW5lOiBBZ21Qb2x5bGluZSk6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlSWNvblNlcXVlbmNlcyhsaW5lOiBBZ21Qb2x5bGluZSk6IFByb21pc2U8dm9pZD47XG4gICAgc2V0UG9seWxpbmVPcHRpb25zKGxpbmU6IEFnbVBvbHlsaW5lLCBvcHRpb25zOiB7XG4gICAgICAgIFtwcm9wTmFtZTogc3RyaW5nXTogYW55O1xuICAgIH0pOiBQcm9taXNlPHZvaWQ+O1xuICAgIGRlbGV0ZVBvbHlsaW5lKGxpbmU6IEFnbVBvbHlsaW5lKTogUHJvbWlzZTx2b2lkPjtcbiAgICBwcml2YXRlIGdldE1WQ1BhdGg7XG4gICAgZ2V0UGF0aChhZ21Qb2x5bGluZTogQWdtUG9seWxpbmUpOiBQcm9taXNlPGdvb2dsZS5tYXBzLkxhdExuZ1tdPjtcbiAgICBjcmVhdGVFdmVudE9ic2VydmFibGU8VD4oZXZlbnROYW1lOiBzdHJpbmcsIGxpbmU6IEFnbVBvbHlsaW5lKTogT2JzZXJ2YWJsZTxUPjtcbiAgICBjcmVhdGVQYXRoRXZlbnRPYnNlcnZhYmxlKGxpbmU6IEFnbVBvbHlsaW5lKTogUHJvbWlzZTxPYnNlcnZhYmxlPE1WQ0V2ZW50PGdvb2dsZS5tYXBzLkxhdExuZz4+Pjtcbn1cbiJdfQ==