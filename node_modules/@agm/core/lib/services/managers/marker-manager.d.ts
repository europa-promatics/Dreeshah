/// <reference types="googlemaps" />
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { AgmMarker } from './../../directives/marker';
import { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';
import * as ɵngcc0 from '@angular/core';
export declare class MarkerManager {
    protected _mapsWrapper: GoogleMapsAPIWrapper;
    protected _zone: NgZone;
    protected _markers: Map<AgmMarker, Promise<google.maps.Marker>>;
    constructor(_mapsWrapper: GoogleMapsAPIWrapper, _zone: NgZone);
    convertAnimation(uiAnim: keyof typeof google.maps.Animation | null): Promise<google.maps.Animation>;
    deleteMarker(markerDirective: AgmMarker): Promise<void>;
    updateMarkerPosition(marker: AgmMarker): Promise<void>;
    updateTitle(marker: AgmMarker): Promise<void>;
    updateLabel(marker: AgmMarker): Promise<void>;
    updateDraggable(marker: AgmMarker): Promise<void>;
    updateIcon(marker: AgmMarker): Promise<void>;
    updateOpacity(marker: AgmMarker): Promise<void>;
    updateVisible(marker: AgmMarker): Promise<void>;
    updateZIndex(marker: AgmMarker): Promise<void>;
    updateClickable(marker: AgmMarker): Promise<void>;
    updateAnimation(marker: AgmMarker): Promise<void>;
    addMarker(marker: AgmMarker): void;
    getNativeMarker(marker: AgmMarker): Promise<google.maps.Marker>;
    createEventObservable<T extends (google.maps.MouseEvent | void)>(eventName: google.maps.MarkerMouseEventNames | google.maps.MarkerChangeOptionEventNames, marker: AgmMarker): Observable<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkerManager>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MarkerManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyLW1hbmFnZXIuZC50cyIsInNvdXJjZXMiOlsibWFya2VyLW1hbmFnZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkEiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cImdvb2dsZW1hcHNcIiAvPlxuaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBZ21NYXJrZXIgfSBmcm9tICcuLy4uLy4uL2RpcmVjdGl2ZXMvbWFya2VyJztcbmltcG9ydCB7IEdvb2dsZU1hcHNBUElXcmFwcGVyIH0gZnJvbSAnLi8uLi9nb29nbGUtbWFwcy1hcGktd3JhcHBlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBNYXJrZXJNYW5hZ2VyIHtcbiAgICBwcm90ZWN0ZWQgX21hcHNXcmFwcGVyOiBHb29nbGVNYXBzQVBJV3JhcHBlcjtcbiAgICBwcm90ZWN0ZWQgX3pvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgX21hcmtlcnM6IE1hcDxBZ21NYXJrZXIsIFByb21pc2U8Z29vZ2xlLm1hcHMuTWFya2VyPj47XG4gICAgY29uc3RydWN0b3IoX21hcHNXcmFwcGVyOiBHb29nbGVNYXBzQVBJV3JhcHBlciwgX3pvbmU6IE5nWm9uZSk7XG4gICAgY29udmVydEFuaW1hdGlvbih1aUFuaW06IGtleW9mIHR5cGVvZiBnb29nbGUubWFwcy5BbmltYXRpb24gfCBudWxsKTogUHJvbWlzZTxnb29nbGUubWFwcy5BbmltYXRpb24+O1xuICAgIGRlbGV0ZU1hcmtlcihtYXJrZXJEaXJlY3RpdmU6IEFnbU1hcmtlcik6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlTWFya2VyUG9zaXRpb24obWFya2VyOiBBZ21NYXJrZXIpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHVwZGF0ZVRpdGxlKG1hcmtlcjogQWdtTWFya2VyKTogUHJvbWlzZTx2b2lkPjtcbiAgICB1cGRhdGVMYWJlbChtYXJrZXI6IEFnbU1hcmtlcik6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlRHJhZ2dhYmxlKG1hcmtlcjogQWdtTWFya2VyKTogUHJvbWlzZTx2b2lkPjtcbiAgICB1cGRhdGVJY29uKG1hcmtlcjogQWdtTWFya2VyKTogUHJvbWlzZTx2b2lkPjtcbiAgICB1cGRhdGVPcGFjaXR5KG1hcmtlcjogQWdtTWFya2VyKTogUHJvbWlzZTx2b2lkPjtcbiAgICB1cGRhdGVWaXNpYmxlKG1hcmtlcjogQWdtTWFya2VyKTogUHJvbWlzZTx2b2lkPjtcbiAgICB1cGRhdGVaSW5kZXgobWFya2VyOiBBZ21NYXJrZXIpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHVwZGF0ZUNsaWNrYWJsZShtYXJrZXI6IEFnbU1hcmtlcik6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlQW5pbWF0aW9uKG1hcmtlcjogQWdtTWFya2VyKTogUHJvbWlzZTx2b2lkPjtcbiAgICBhZGRNYXJrZXIobWFya2VyOiBBZ21NYXJrZXIpOiB2b2lkO1xuICAgIGdldE5hdGl2ZU1hcmtlcihtYXJrZXI6IEFnbU1hcmtlcik6IFByb21pc2U8Z29vZ2xlLm1hcHMuTWFya2VyPjtcbiAgICBjcmVhdGVFdmVudE9ic2VydmFibGU8VCBleHRlbmRzIChnb29nbGUubWFwcy5Nb3VzZUV2ZW50IHwgdm9pZCk+KGV2ZW50TmFtZTogZ29vZ2xlLm1hcHMuTWFya2VyTW91c2VFdmVudE5hbWVzIHwgZ29vZ2xlLm1hcHMuTWFya2VyQ2hhbmdlT3B0aW9uRXZlbnROYW1lcywgbWFya2VyOiBBZ21NYXJrZXIpOiBPYnNlcnZhYmxlPFQ+O1xufVxuIl19