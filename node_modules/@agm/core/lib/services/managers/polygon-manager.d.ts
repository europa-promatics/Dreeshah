/// <reference types="googlemaps" />
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { AgmPolygon } from '../../directives/polygon';
import { MVCEvent } from '../../utils/mvcarray-utils';
import { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';
import * as ɵngcc0 from '@angular/core';
export declare class PolygonManager {
    private _mapsWrapper;
    private _zone;
    private _polygons;
    constructor(_mapsWrapper: GoogleMapsAPIWrapper, _zone: NgZone);
    addPolygon(path: AgmPolygon): void;
    updatePolygon(polygon: AgmPolygon): Promise<void>;
    setPolygonOptions(path: AgmPolygon, options: {
        [propName: string]: any;
    }): Promise<void>;
    deletePolygon(paths: AgmPolygon): Promise<void>;
    getPath(polygonDirective: AgmPolygon): Promise<google.maps.LatLng[]>;
    getPaths(polygonDirective: AgmPolygon): Promise<google.maps.LatLng[][]>;
    createEventObservable<T>(eventName: string, path: AgmPolygon): Observable<T>;
    createPathEventObservable(agmPolygon: AgmPolygon): Promise<Observable<MVCEvent<google.maps.LatLng[] | google.maps.LatLngLiteral[]>>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolygonManager>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PolygonManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9seWdvbi1tYW5hZ2VyLmQudHMiLCJzb3VyY2VzIjpbInBvbHlnb24tbWFuYWdlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBTUE7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cImdvb2dsZW1hcHNcIiAvPlxuaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBZ21Qb2x5Z29uIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9wb2x5Z29uJztcbmltcG9ydCB7IE1WQ0V2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvbXZjYXJyYXktdXRpbHMnO1xuaW1wb3J0IHsgR29vZ2xlTWFwc0FQSVdyYXBwZXIgfSBmcm9tICcuLi9nb29nbGUtbWFwcy1hcGktd3JhcHBlcic7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQb2x5Z29uTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBfbWFwc1dyYXBwZXI7XG4gICAgcHJpdmF0ZSBfem9uZTtcbiAgICBwcml2YXRlIF9wb2x5Z29ucztcbiAgICBjb25zdHJ1Y3RvcihfbWFwc1dyYXBwZXI6IEdvb2dsZU1hcHNBUElXcmFwcGVyLCBfem9uZTogTmdab25lKTtcbiAgICBhZGRQb2x5Z29uKHBhdGg6IEFnbVBvbHlnb24pOiB2b2lkO1xuICAgIHVwZGF0ZVBvbHlnb24ocG9seWdvbjogQWdtUG9seWdvbik6IFByb21pc2U8dm9pZD47XG4gICAgc2V0UG9seWdvbk9wdGlvbnMocGF0aDogQWdtUG9seWdvbiwgb3B0aW9uczoge1xuICAgICAgICBbcHJvcE5hbWU6IHN0cmluZ106IGFueTtcbiAgICB9KTogUHJvbWlzZTx2b2lkPjtcbiAgICBkZWxldGVQb2x5Z29uKHBhdGhzOiBBZ21Qb2x5Z29uKTogUHJvbWlzZTx2b2lkPjtcbiAgICBnZXRQYXRoKHBvbHlnb25EaXJlY3RpdmU6IEFnbVBvbHlnb24pOiBQcm9taXNlPGdvb2dsZS5tYXBzLkxhdExuZ1tdPjtcbiAgICBnZXRQYXRocyhwb2x5Z29uRGlyZWN0aXZlOiBBZ21Qb2x5Z29uKTogUHJvbWlzZTxnb29nbGUubWFwcy5MYXRMbmdbXVtdPjtcbiAgICBjcmVhdGVFdmVudE9ic2VydmFibGU8VD4oZXZlbnROYW1lOiBzdHJpbmcsIHBhdGg6IEFnbVBvbHlnb24pOiBPYnNlcnZhYmxlPFQ+O1xuICAgIGNyZWF0ZVBhdGhFdmVudE9ic2VydmFibGUoYWdtUG9seWdvbjogQWdtUG9seWdvbik6IFByb21pc2U8T2JzZXJ2YWJsZTxNVkNFdmVudDxnb29nbGUubWFwcy5MYXRMbmdbXSB8IGdvb2dsZS5tYXBzLkxhdExuZ0xpdGVyYWxbXT4+Pjtcbn1cbiJdfQ==