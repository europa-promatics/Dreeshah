import { EventEmitter } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare class StarRatingComponent {
    private stars;
    private _checkedColor;
    private _unCheckedColor;
    private _value;
    private _size;
    private _readOnly;
    private _totalStars;
    private onStarsCountChange;
    private onValueChange;
    private onCheckedColorChange;
    private onUnCheckedColorChange;
    private onSizeChange;
    private onReadOnlyChange;
    private static readonly VAR_CHECKED_COLOR;
    private static readonly VAR_UNCHECKED_COLOR;
    private static readonly VAR_SIZE;
    private static readonly VAR_HALF_WIDTH;
    private static readonly VAR_HALF_MARGIN;
    private static readonly CLS_CHECKED_STAR;
    private static readonly CLS_DEFAULT_STAR;
    private static readonly CLS_HALF_STAR;
    private static readonly INP_CHECKED_COLOR;
    private static readonly INP_UNCHECKED_COLOR;
    private static readonly INP_VALUE;
    private static readonly INP_SIZE;
    private static readonly INP_READONLY;
    private static readonly INP_TOTALSTARS;
    private mainElement;
    constructor();
    get checkedcolor(): string;
    get uncheckedcolor(): string;
    get value(): number;
    get size(): string;
    get readonly(): boolean;
    get totalstars(): number;
    rate: EventEmitter<{
        oldValue: number;
        newValue: number;
        starRating: StarRatingComponent;
    }>;
    set checkedcolor(value: string);
    set uncheckedcolor(value: string);
    set value(value: number);
    set size(value: string);
    set readonly(value: boolean);
    set totalstars(value: number);
    private makeEditable;
    private makeReadOnly;
    private addEvents;
    private ngAfterViewInit;
    private onRate;
    private onStar;
    private offStar;
    private addDefaultClass;
    private addCheckedStarClass;
    private addHalfStarClass;
    private setStars;
    private applySizeAllStars;
    private applyColorStyleAllStars;
    private applyColorStyle;
    private applyCheckedColorStyle;
    private applyUnCheckedColorStyle;
    private generateRating;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<StarRatingComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<StarRatingComponent, "star-rating", never, {
    "checkedcolor": "checkedcolor";
    "uncheckedcolor": "uncheckedcolor";
    "value": "value";
    "size": "size";
    "readonly": "readonly";
    "totalstars": "totalstars";
}, {
    "rate": "rate";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Rhci1yYXRpbmcuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInN0YXItcmF0aW5nLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnRUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgU3RhclJhdGluZ0NvbXBvbmVudCB7XHJcbiAgICBwcml2YXRlIHN0YXJzO1xyXG4gICAgcHJpdmF0ZSBfY2hlY2tlZENvbG9yO1xyXG4gICAgcHJpdmF0ZSBfdW5DaGVja2VkQ29sb3I7XHJcbiAgICBwcml2YXRlIF92YWx1ZTtcclxuICAgIHByaXZhdGUgX3NpemU7XHJcbiAgICBwcml2YXRlIF9yZWFkT25seTtcclxuICAgIHByaXZhdGUgX3RvdGFsU3RhcnM7XHJcbiAgICBwcml2YXRlIG9uU3RhcnNDb3VudENoYW5nZTtcclxuICAgIHByaXZhdGUgb25WYWx1ZUNoYW5nZTtcclxuICAgIHByaXZhdGUgb25DaGVja2VkQ29sb3JDaGFuZ2U7XHJcbiAgICBwcml2YXRlIG9uVW5DaGVja2VkQ29sb3JDaGFuZ2U7XHJcbiAgICBwcml2YXRlIG9uU2l6ZUNoYW5nZTtcclxuICAgIHByaXZhdGUgb25SZWFkT25seUNoYW5nZTtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFZBUl9DSEVDS0VEX0NPTE9SO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVkFSX1VOQ0hFQ0tFRF9DT0xPUjtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFZBUl9TSVpFO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVkFSX0hBTEZfV0lEVEg7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBWQVJfSEFMRl9NQVJHSU47XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBDTFNfQ0hFQ0tFRF9TVEFSO1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgQ0xTX0RFRkFVTFRfU1RBUjtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IENMU19IQUxGX1NUQVI7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBJTlBfQ0hFQ0tFRF9DT0xPUjtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IElOUF9VTkNIRUNLRURfQ09MT1I7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBJTlBfVkFMVUU7XHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBJTlBfU0laRTtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IElOUF9SRUFET05MWTtcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IElOUF9UT1RBTFNUQVJTO1xyXG4gICAgcHJpdmF0ZSBtYWluRWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKCk7XHJcbiAgICBnZXQgY2hlY2tlZGNvbG9yKCk6IHN0cmluZztcclxuICAgIGdldCB1bmNoZWNrZWRjb2xvcigpOiBzdHJpbmc7XHJcbiAgICBnZXQgdmFsdWUoKTogbnVtYmVyO1xyXG4gICAgZ2V0IHNpemUoKTogc3RyaW5nO1xyXG4gICAgZ2V0IHJlYWRvbmx5KCk6IGJvb2xlYW47XHJcbiAgICBnZXQgdG90YWxzdGFycygpOiBudW1iZXI7XHJcbiAgICByYXRlOiBFdmVudEVtaXR0ZXI8e1xyXG4gICAgICAgIG9sZFZhbHVlOiBudW1iZXI7XHJcbiAgICAgICAgbmV3VmFsdWU6IG51bWJlcjtcclxuICAgICAgICBzdGFyUmF0aW5nOiBTdGFyUmF0aW5nQ29tcG9uZW50O1xyXG4gICAgfT47XHJcbiAgICBzZXQgY2hlY2tlZGNvbG9yKHZhbHVlOiBzdHJpbmcpO1xyXG4gICAgc2V0IHVuY2hlY2tlZGNvbG9yKHZhbHVlOiBzdHJpbmcpO1xyXG4gICAgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpO1xyXG4gICAgc2V0IHNpemUodmFsdWU6IHN0cmluZyk7XHJcbiAgICBzZXQgcmVhZG9ubHkodmFsdWU6IGJvb2xlYW4pO1xyXG4gICAgc2V0IHRvdGFsc3RhcnModmFsdWU6IG51bWJlcik7XHJcbiAgICBwcml2YXRlIG1ha2VFZGl0YWJsZTtcclxuICAgIHByaXZhdGUgbWFrZVJlYWRPbmx5O1xyXG4gICAgcHJpdmF0ZSBhZGRFdmVudHM7XHJcbiAgICBwcml2YXRlIG5nQWZ0ZXJWaWV3SW5pdDtcclxuICAgIHByaXZhdGUgb25SYXRlO1xyXG4gICAgcHJpdmF0ZSBvblN0YXI7XHJcbiAgICBwcml2YXRlIG9mZlN0YXI7XHJcbiAgICBwcml2YXRlIGFkZERlZmF1bHRDbGFzcztcclxuICAgIHByaXZhdGUgYWRkQ2hlY2tlZFN0YXJDbGFzcztcclxuICAgIHByaXZhdGUgYWRkSGFsZlN0YXJDbGFzcztcclxuICAgIHByaXZhdGUgc2V0U3RhcnM7XHJcbiAgICBwcml2YXRlIGFwcGx5U2l6ZUFsbFN0YXJzO1xyXG4gICAgcHJpdmF0ZSBhcHBseUNvbG9yU3R5bGVBbGxTdGFycztcclxuICAgIHByaXZhdGUgYXBwbHlDb2xvclN0eWxlO1xyXG4gICAgcHJpdmF0ZSBhcHBseUNoZWNrZWRDb2xvclN0eWxlO1xyXG4gICAgcHJpdmF0ZSBhcHBseVVuQ2hlY2tlZENvbG9yU3R5bGU7XHJcbiAgICBwcml2YXRlIGdlbmVyYXRlUmF0aW5nO1xyXG59XHJcbiJdfQ==