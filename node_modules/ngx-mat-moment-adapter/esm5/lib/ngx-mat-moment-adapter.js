/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { __decorate, __extends, __metadata, __param } from "tslib";
import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { MAT_DATE_LOCALE } from '@angular/material/core';
// Depending on whether rollup is used, moment needs to be imported differently.
// Since Moment.js doesn't have a default export, we normally need to import using the `* as`
// syntax. However, rollup creates a synthetic default module and we thus need to import it using
// the `default as` syntax.
// TODO(mmalerba): See if we can clean this up at some point.
import * as _moment from 'moment';
// tslint:disable-next-line:no-duplicate-imports
import { default as _rollupMoment } from 'moment';
import { NgxMatDateAdapter } from 'ngx-mat-datetime-picker';
var moment = _rollupMoment || _moment;
/** InjectionToken for moment date adapter to configure options. */
export var MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {
    providedIn: 'root',
    factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY
});
/** @docs-private */
export function MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {
    return {
        useUtc: false
    };
}
/** Creates an array and fills it with values. */
function range(length, valueFunction) {
    var valuesArray = Array(length);
    for (var i = 0; i < length; i++) {
        valuesArray[i] = valueFunction(i);
    }
    return valuesArray;
}
/** Adapts Moment.js Dates for use with Angular Material. */
var NgxMatMomentAdapter = /** @class */ (function (_super) {
    __extends(NgxMatMomentAdapter, _super);
    function NgxMatMomentAdapter(dateLocale, _options) {
        var _this = _super.call(this) || this;
        _this._options = _options;
        _this.setLocale(dateLocale || moment.locale());
        return _this;
    }
    NgxMatMomentAdapter.prototype.setLocale = function (locale) {
        var _this = this;
        _super.prototype.setLocale.call(this, locale);
        var momentLocaleData = moment.localeData(locale);
        this._localeData = {
            firstDayOfWeek: momentLocaleData.firstDayOfWeek(),
            longMonths: momentLocaleData.months(),
            shortMonths: momentLocaleData.monthsShort(),
            dates: range(31, function (i) { return _this.createDate(2017, 0, i + 1).format('D'); }),
            longDaysOfWeek: momentLocaleData.weekdays(),
            shortDaysOfWeek: momentLocaleData.weekdaysShort(),
            narrowDaysOfWeek: momentLocaleData.weekdaysMin(),
        };
    };
    NgxMatMomentAdapter.prototype.getYear = function (date) {
        return this.clone(date).year();
    };
    NgxMatMomentAdapter.prototype.getMonth = function (date) {
        return this.clone(date).month();
    };
    NgxMatMomentAdapter.prototype.getDate = function (date) {
        return this.clone(date).date();
    };
    NgxMatMomentAdapter.prototype.getDayOfWeek = function (date) {
        return this.clone(date).day();
    };
    NgxMatMomentAdapter.prototype.getMonthNames = function (style) {
        // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.
        return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;
    };
    NgxMatMomentAdapter.prototype.getDateNames = function () {
        return this._localeData.dates;
    };
    NgxMatMomentAdapter.prototype.getDayOfWeekNames = function (style) {
        if (style == 'long') {
            return this._localeData.longDaysOfWeek;
        }
        if (style == 'short') {
            return this._localeData.shortDaysOfWeek;
        }
        return this._localeData.narrowDaysOfWeek;
    };
    NgxMatMomentAdapter.prototype.getYearName = function (date) {
        return this.clone(date).format('YYYY');
    };
    NgxMatMomentAdapter.prototype.getFirstDayOfWeek = function () {
        return this._localeData.firstDayOfWeek;
    };
    NgxMatMomentAdapter.prototype.getNumDaysInMonth = function (date) {
        return this.clone(date).daysInMonth();
    };
    NgxMatMomentAdapter.prototype.clone = function (date) {
        return date.clone().locale(this.locale);
    };
    NgxMatMomentAdapter.prototype.createDate = function (year, month, date) {
        // Moment.js will create an invalid date if any of the components are out of bounds, but we
        // explicitly check each case so we can throw more descriptive errors.
        if (month < 0 || month > 11) {
            throw Error("Invalid month index \"" + month + "\". Month index has to be between 0 and 11.");
        }
        if (date < 1) {
            throw Error("Invalid date \"" + date + "\". Date has to be greater than 0.");
        }
        var result = this._createMoment({ year: year, month: month, date: date }).locale(this.locale);
        // If the result isn't valid, the date must have been out of bounds for this month.
        if (!result.isValid()) {
            throw Error("Invalid date \"" + date + "\" for month with index \"" + month + "\".");
        }
        return result;
    };
    NgxMatMomentAdapter.prototype.today = function () {
        return this._createMoment().locale(this.locale);
    };
    NgxMatMomentAdapter.prototype.parse = function (value, parseFormat) {
        if (value && typeof value == 'string') {
            return this._createMoment(value, parseFormat, this.locale);
        }
        return value ? this._createMoment(value).locale(this.locale) : null;
    };
    NgxMatMomentAdapter.prototype.format = function (date, displayFormat) {
        date = this.clone(date);
        if (!this.isValid(date)) {
            throw Error('MomentDateAdapter: Cannot format invalid date.');
        }
        return date.format(displayFormat);
    };
    NgxMatMomentAdapter.prototype.addCalendarYears = function (date, years) {
        return this.clone(date).add({ years: years });
    };
    NgxMatMomentAdapter.prototype.addCalendarMonths = function (date, months) {
        return this.clone(date).add({ months: months });
    };
    NgxMatMomentAdapter.prototype.addCalendarDays = function (date, days) {
        return this.clone(date).add({ days: days });
    };
    NgxMatMomentAdapter.prototype.toIso8601 = function (date) {
        return this.clone(date).format();
    };
    /**
     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings
     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty
     * string into null. Returns an invalid date for all other values.
     */
    NgxMatMomentAdapter.prototype.deserialize = function (value) {
        var date;
        if (value instanceof Date) {
            date = this._createMoment(value).locale(this.locale);
        }
        else if (this.isDateInstance(value)) {
            // Note: assumes that cloning also sets the correct locale.
            return this.clone(value);
        }
        if (typeof value === 'string') {
            if (!value) {
                return null;
            }
            date = this._createMoment(value, moment.ISO_8601).locale(this.locale);
        }
        if (date && this.isValid(date)) {
            return this._createMoment(date).locale(this.locale);
        }
        return _super.prototype.deserialize.call(this, value);
    };
    NgxMatMomentAdapter.prototype.isDateInstance = function (obj) {
        return moment.isMoment(obj);
    };
    NgxMatMomentAdapter.prototype.isValid = function (date) {
        return this.clone(date).isValid();
    };
    NgxMatMomentAdapter.prototype.invalid = function () {
        return moment.invalid();
    };
    NgxMatMomentAdapter.prototype.getHour = function (date) {
        return date.hours();
    };
    NgxMatMomentAdapter.prototype.getMinute = function (date) {
        return date.minutes();
    };
    NgxMatMomentAdapter.prototype.getSecond = function (date) {
        return date.seconds();
    };
    NgxMatMomentAdapter.prototype.setHour = function (date, value) {
        date.hours(value);
    };
    NgxMatMomentAdapter.prototype.setMinute = function (date, value) {
        date.minutes(value);
    };
    NgxMatMomentAdapter.prototype.setSecond = function (date, value) {
        date.seconds(value);
    };
    /** Creates a Moment instance while respecting the current UTC settings. */
    NgxMatMomentAdapter.prototype._createMoment = function (date, format, locale) {
        var _a = this._options || {}, strict = _a.strict, useUtc = _a.useUtc;
        return useUtc
            ? moment.utc(date, format, locale, strict)
            : moment(date, format, locale, strict);
    };
    NgxMatMomentAdapter.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS,] }] }
    ]; };
    NgxMatMomentAdapter = __decorate([
        Injectable(),
        __param(0, Optional()), __param(0, Inject(MAT_DATE_LOCALE)),
        __param(1, Optional()), __param(1, Inject(MAT_MOMENT_DATE_ADAPTER_OPTIONS)),
        __metadata("design:paramtypes", [String, Object])
    ], NgxMatMomentAdapter);
    return NgxMatMomentAdapter;
}(NgxMatDateAdapter));
export { NgxMatMomentAdapter };
//# sourceMappingURL=data:application/json;base64,